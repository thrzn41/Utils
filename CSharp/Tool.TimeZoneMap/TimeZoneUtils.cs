/* 
 * MIT License
 * 
 * Copyright(c) 2020 thrzn41
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/************************************************/
/* This code was generated by Tool.TimeZoneMap. */
/************************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using Thrzn41.Util;

namespace Tool.TimeZoneMap.Thrzn41.Util
{

    /// <summary>
    /// Utils for TimeZone.
    /// </summary>
    public static class TimeZoneUtils
    {
        /// <summary>
        /// Windows Id Version Tag.
        /// </summary>
        private const string WINDOWS_ID_VERSION_TAG = "$WINDOWS_ID_VERSION_TAG$";

        /// <summary>
        /// TzId Version Tag.
        /// </summary>
        private const string TZ_ID_VERSION_TAG = "$TZ_ID_VERSION_TAG$";

        /// <summary>
        /// Empty map.
        /// </summary>
        private static readonly ReadOnlyDictionary<string, string> EMPTY_MAP = new ReadOnlyDictionary<string, string>(new Dictionary<string, string>(0));


        /// <summary>
        /// Windows Id Version Tag.
        /// </summary>
        public static string WindowsIdVersionTag
        {
            get
            {
                return WINDOWS_ID_VERSION_TAG;
            }
        }

        /// <summary>
        /// TzId Version Tag.
        /// </summary>
        public static string TzIdVersionTag
        {
            get
            {
                return TZ_ID_VERSION_TAG;
            }
        }


#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)

        /// <summary>
        /// WindowsId to TzId map(Lazy Load).
        /// </summary>
        private static readonly Lazy<ReadOnlyDictionary<string, string>> LAZY_WINDOWS_ID_TO_TZ_ID_MAP;

        /// <summary>
        /// TzId to WindowsId map(Lazy Load).
        /// </summary>
        private static readonly Lazy<ReadOnlyDictionary<string, string>> LAZY_TZ_ID_TO_WINDOWS_ID_MAP;

        /// <summary>
        /// WindowsId to TzId map(Lazy Load).
        /// </summary>
        private static readonly Lazy<ReadOnlyDictionary<string, string>> LAZY_WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP;


        /// <summary>
        /// WindowsId to TzId map.
        /// </summary>
        private static ReadOnlyDictionary<string, string> WINDOWS_ID_TO_TZ_ID_MAP
        {
            get
            {
                return LAZY_WINDOWS_ID_TO_TZ_ID_MAP.Value;
            }
        }

        /// <summary>
        /// TzId to WindowsId map.
        /// </summary>
        private static ReadOnlyDictionary<string, string> TZ_ID_TO_WINDOWS_ID_MAP
        {
            get
            {
                return LAZY_TZ_ID_TO_WINDOWS_ID_MAP.Value;
            }
        }

        /// <summary>
        /// WindowsId to TzId map.
        /// </summary>
        private static ReadOnlyDictionary<string, string> WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP
        {
            get
            {
                return LAZY_WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP.Value;
            }
        }

#else
        /// <summary>
        /// WindowsId to TzId map.
        /// </summary>
        private static readonly ReadOnlyDictionary<string, string> WINDOWS_ID_TO_TZ_ID_MAP;

        /// <summary>
        /// TzId to WindowsId map.
        /// </summary>
        private static readonly ReadOnlyDictionary<string, string> TZ_ID_TO_WINDOWS_ID_MAP;

        /// <summary>
        /// WindowsId to TzId map.
        /// </summary>
        private static readonly ReadOnlyDictionary<string, string> WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP;
#endif

        /// <summary>
        /// Presume this environmet has windows time zone.
        /// </summary>
        private static readonly bool PRESUME_WINDOWS_TIME_ZONE_ENVIRONMENT;


#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)

        /// <summary>
        /// Slim Lock.
        /// </summary>
        private static readonly SlimLock LOCK = new CacheEnabledSlimLock();

        /// <summary>
        /// Init counter.
        /// </summary>
        private static int INIT_COUNT = 0;


#if (DOTNETSTANDARD1_3 || DOTNETSTANDARD2_0 || DOTNETCORE1_0 || DOTNETFRAMEWORK4_5_2 || DOTNETFRAMEWORK4_6_1)

        /// <summary>
        /// TimeZone id database to reduce reference count.
        /// </summary>
        private static Dictionary<string, string> TIME_ZONE_ID_DATABASE = null;

#else

        /// <summary>
        /// TimeZone id database to reduce reference count.
        /// </summary>
        private static HashSet<string> TIME_ZONE_ID_DATABASE = null;
    
#endif

        /// <summary>
        /// Try add to TimeZone Id map.
        /// </summary>
        /// <param name="dictionary">Target map.</param>
        /// <param name="key">The key.</param>
        /// <param name="value">The value for the key.</param>
        /// <returns>true if the key, value paire added to the map.</returns>
        private static bool TryAddToDictionary(Dictionary<string, string> dictionary, string key, string value)
        {
            if (!dictionary.ContainsKey(key))
            {
                dictionary.Add(key, value);
                return true;
            }

            return false;
        }


        /// <summary>
        /// Load TimeZone Id map from resource.
        /// </summary>
        /// <param name="timeZoneIdMap">TimeZone id map to be loaded.</param>
        /// <param name="resourceName">Source resource of the map.</param>
        private static void loadTimeZoneIdMap(Dictionary<string, string> timeZoneIdMap, string resourceName)
        {
            using (var lockW = LOCK.EnterLockedWriteBlock())
            using (var stream = (typeof(TimeZoneUtils)).GetTypeInfo().Assembly.GetManifestResourceStream(resourceName))
            using (var reader = new StreamReader(stream, UTF8Utils.UTF8_WITHOUT_BOM))
            {
                int index;
                string line, src, dest, rsrc, rdest;

                if (TIME_ZONE_ID_DATABASE == null)
                {
#if (DOTNETSTANDARD1_3 || DOTNETSTANDARD2_0 || DOTNETCORE1_0 || DOTNETFRAMEWORK4_5_2 || DOTNETFRAMEWORK4_6_1)
                    TIME_ZONE_ID_DATABASE = new Dictionary<string, string>(/* $TIME_ZONE_ID_MAX$ */);
#else
                    TIME_ZONE_ID_DATABASE = new HashSet<string>(/* $TIME_ZONE_ID_MAX$ */);
#endif
                }

                while (!reader.EndOfStream)
                {
                    line = reader.ReadLine();

                    if (!String.IsNullOrEmpty(line))
                    {
                        index = line.IndexOf(',');

                        if (index > 0)
                        {
                            src = line.Substring(0, index);
                            dest = line.Substring(index + 1);

                            if (!TIME_ZONE_ID_DATABASE.TryGetValue(src, out rsrc))
                            {
#if (DOTNETSTANDARD1_3 || DOTNETSTANDARD2_0 || DOTNETCORE1_0 || DOTNETFRAMEWORK4_5_2 || DOTNETFRAMEWORK4_6_1)
                                TryAddToDictionary(TIME_ZONE_ID_DATABASE, src, src);
#else
                                TIME_ZONE_ID_DATABASE.Add(src);
#endif
                                rsrc = src;
                            }

                            if (!TIME_ZONE_ID_DATABASE.TryGetValue(dest, out rdest))
                            {
#if (DOTNETSTANDARD1_3 || DOTNETSTANDARD2_0 || DOTNETCORE1_0 || DOTNETFRAMEWORK4_5_2 || DOTNETFRAMEWORK4_6_1)
                                TryAddToDictionary(TIME_ZONE_ID_DATABASE, dest, dest);
#else
                                TIME_ZONE_ID_DATABASE.Add(dest);
#endif
                                rdest = dest;
                            }

                            // timeZoneIdMap.TryAdd(rsrc, rdest);
                            TryAddToDictionary(timeZoneIdMap, rsrc, rdest);
                        }
                    }
                }

                INIT_COUNT++;

                if (INIT_COUNT >= 3)
                {
                    TIME_ZONE_ID_DATABASE.Clear();
#if !(DOTNETSTANDARD1_3 || DOTNETSTANDARD2_0 || DOTNETCORE1_0 || DOTNETFRAMEWORK4_5_2 || DOTNETFRAMEWORK4_6_1)
                    TIME_ZONE_ID_DATABASE.TrimExcess();
#endif
                    TIME_ZONE_ID_DATABASE = null;
                }
            }
        }

#endif

        /// <summary>
        /// Loads WindowsId to TzId TimeZone map.
        /// </summary>
        /// <returns></returns>
        private static ReadOnlyDictionary<string, string> loadWindowsIdToTzIdMap()
        {
            try
            {
                Dictionary<string, string> idMap;

#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)
                idMap = new Dictionary<string, string>(/* $WINDOWS_ID_TO_TZ_ID_MAP_SIZE$ */);

                loadTimeZoneIdMap(idMap, "Thrzn41.Util.Resources.WindowsIdToTzId.dat");
#else
                idMap = new Dictionary<string, string>()
                {
                    // $WINDOWS_ID_TO_TZ_ID_MAP$
                };
#endif

                return new ReadOnlyDictionary<string, string>(idMap);
            }
            catch (Exception)
            {
                return EMPTY_MAP;
            }
        }

        /// <summary>
        /// Loads TzId to WindowsId TimeZone map.
        /// </summary>
        /// <returns></returns>
        private static ReadOnlyDictionary<string, string> loadTzIdToWindowsIdMap()
        {
            try
            {
                Dictionary<string, string> idMap;

#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)
                idMap = new Dictionary<string, string>(/* $TZ_ID_TO_WINDOWS_ID_MAP_SIZE$ */);

                loadTimeZoneIdMap(idMap, "Thrzn41.Util.Resources.TzIdToWindowsId.dat");
#else
                idMap = new Dictionary<string, string>()
                {
                    // $TZ_ID_TO_WINDOWS_ID_MAP$
                };
#endif

                return new ReadOnlyDictionary<string, string>(idMap);
            }
            catch (Exception)
            {
                return EMPTY_MAP;
            }
        }

        /// <summary>
        /// Loads WindowsId to TzId TimeZone map.
        /// </summary>
        /// <returns></returns>
        private static ReadOnlyDictionary<string, string> loadWindowsIdToTzIdMap2()
        {
            try
            {
                Dictionary<string, string> idMap;

#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)
                idMap = new Dictionary<string, string>(/* $WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP_SIZE$ */);

                loadTimeZoneIdMap(idMap, "Thrzn41.Util.Resources.WindowsIdToTzIdTerritoryIndipendent.dat");
#else
                idMap = new Dictionary<string, string>()
                {
                    // $WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP$
                };
#endif

                return new ReadOnlyDictionary<string, string>(idMap);
            }
            catch (Exception)
            {
                return EMPTY_MAP;
            }
        }

        static TimeZoneUtils()
        {

#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)

            LAZY_WINDOWS_ID_TO_TZ_ID_MAP = new Lazy<ReadOnlyDictionary<string, string>>(loadWindowsIdToTzIdMap, System.Threading.LazyThreadSafetyMode.ExecutionAndPublication);
            LAZY_TZ_ID_TO_WINDOWS_ID_MAP = new Lazy<ReadOnlyDictionary<string, string>>(loadTzIdToWindowsIdMap, System.Threading.LazyThreadSafetyMode.ExecutionAndPublication);

            LAZY_WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP = new Lazy<ReadOnlyDictionary<string, string>>(loadWindowsIdToTzIdMap2, System.Threading.LazyThreadSafetyMode.ExecutionAndPublication);
#else
            WINDOWS_ID_TO_TZ_ID_MAP = loadWindowsIdToTzIdMap();
            TZ_ID_TO_WINDOWS_ID_MAP = loadTzIdToWindowsIdMap();

            WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP = loadWindowsIdToTzIdMap2();
#endif

            PRESUME_WINDOWS_TIME_ZONE_ENVIRONMENT = ("UTC" == TimeZoneInfo.Utc.Id);
        }


        /// <summary>
        /// Preferred TzId.
        /// </summary>
        public enum PreferredTzId
        {
            /// <summary>
            /// Default.
            /// </summary>
            Default = 0,

            /// <summary>
            /// Territory Indipendent TzId preferred.
            /// </summary>
            TerritoryIndipendent,
        }


        /// <summary>
        /// Gets the tz database id corresponds to a Windows time zone id.
        /// </summary>
        /// <param name="windowsId">Windows time zone id.</param>
        /// <param name="tzId">tz database id corresponds to the Windows time zone id.</param>
        /// <param name="preferredTzId">Preferred TzId type.</param>
        /// <returns>true if the tz database id is found, otherwise false.</returns>
        public static bool TryGetTzIdFromWindowsId(string windowsId, out string tzId, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            // To increase possiblity to clear TIME_ZONE_ID_DATABASE, always try to load lazy map for this small map(TerritoryIndipendetnMap).
            var territoryIndipendentMap = WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP;

            if (territoryIndipendentMap != null && preferredTzId == PreferredTzId.TerritoryIndipendent)
            {
                if (territoryIndipendentMap.TryGetValue(windowsId, out tzId))
                {
                    return true;
                }
            }

            return WINDOWS_ID_TO_TZ_ID_MAP.TryGetValue(windowsId, out tzId);
        }

        /// <summary>
        /// Gets the tz database id corresponds to a Windows time zone id.
        /// </summary>
        /// <param name="windowsId">Windows time zone id.</param>
        /// <param name="preferredTzId">Preferred TzId type.</param>
        /// <returns>tz database id corresponds to the Windows time zone id.</returns>
        /// <exception cref="TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        public static string GetTzIdFromWindowsId(string windowsId, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            string id;

            if (!TryGetTzIdFromWindowsId(windowsId, out id, preferredTzId))
            {
                throw new TimeZoneInfoNotFoundException(String.Format(ResourceMessage.ErrorMessages.TimeZondIdNotFound, windowsId));
            }

            return id;
        }

        /// <summary>
        /// Gets the tz database id list corresponds to a Windows time zone id.
        /// </summary>
        /// <param name="windowsId">Windows time zone id.</param>
        /// <param name="tzIds">tz database id corresponds to the Windows time zone id.</param>
        /// <returns>true if the tz database id is found, otherwise false.</returns>
        public static bool TryGetTzIdsFromWindowsId(string windowsId, out string[] tzIds)
        {
            if (WINDOWS_ID_TO_TZ_ID_MAP.ContainsKey(windowsId))
            {
                var items = new List<string>();

                foreach (var kv in TZ_ID_TO_WINDOWS_ID_MAP)
                {
                    if (kv.Value == windowsId)
                    {
                        items.Add(kv.Key);
                    }
                }

                if (items.Count > 0)
                {
                    tzIds = items.ToArray();
                    return true;
                }
            }

            tzIds = null;
            return false;
        }

        /// <summary>
        /// Gets the tz database id list corresponds to a Windows time zone id.
        /// </summary>
        /// <param name="windowsId">Windows time zone id.</param>
        /// <returns>tz database id corresponds to the Windows time zone id.</returns>
        /// <exception cref="TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        public static string[] GetTzIdsFromWindowsId(string windowsId)
        {
            string[] ids;

            if (!TryGetTzIdsFromWindowsId(windowsId, out ids))
            {
                throw new TimeZoneInfoNotFoundException(String.Format(ResourceMessage.ErrorMessages.TimeZondIdNotFound, windowsId));
            }

            return ids;
        }

        /// <summary>
        /// Gets the Windows time zone id corresponds to a tz database id. 
        /// </summary>
        /// <param name="tzId">tz database id.</param>
        /// <param name="windowsId">Windows time zone id corresponds to the tz database id.</param>
        /// <returns>true if the Windows time zone id is found, otherwise false.</returns>
        public static bool TryGetWindowsIdFromTzId(string tzId, out string windowsId)
        {
            return TZ_ID_TO_WINDOWS_ID_MAP.TryGetValue(tzId, out windowsId);
        }


        /// <summary>
        /// Gets the Windows time zone id corresponds to a tz database id.  
        /// </summary>
        /// <param name="tzId">tz database id.</param>
        /// <returns>Windows time zone id corresponds to the tz database id.</returns>
        /// <exception cref="TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        public static string GetWindowsIdFromTzId(string tzId)
        {
            string id;

            if (!TryGetWindowsIdFromTzId(tzId, out id))
            {
                throw new TimeZoneInfoNotFoundException(String.Format(ResourceMessage.ErrorMessages.TimeZondIdNotFound, tzId));
            }

            return id;
        }

        /// <summary>
        /// Gets the tz database id from <see cref="TimeZoneInfo"/>. 
        /// </summary>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <param name="tzId">tz database id corresponds to the Windows time zone id.</param>
        /// <param name="preferredTzId">Preferred TzId type.</param>
        /// <returns>true if the tz database id is found, otherwise false.</returns>
        public static bool TryGetTzIdFromTimeZoneInfo(TimeZoneInfo timeZoneInfo, out string tzId, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            string id = timeZoneInfo.Id;

            if (TZ_ID_TO_WINDOWS_ID_MAP.ContainsKey(id))
            {
                tzId = id;
                return true;
            }

            return TryGetTzIdFromWindowsId(id, out tzId, preferredTzId);
        }

        /// <summary>
        /// Gets the tz database id from <see cref="TimeZoneInfo"/>. 
        /// </summary>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <param name="preferredTzId">Preferred TzId type.</param>
        /// <returns>tz database id corresponds to the Windows time zone id.</returns>
        public static string GetTzIdFromTimeZoneInfo(TimeZoneInfo timeZoneInfo, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            string id;

            if (!TryGetTzIdFromTimeZoneInfo(timeZoneInfo, out id, preferredTzId))
            {
                throw new TimeZoneInfoNotFoundException(String.Format(ResourceMessage.ErrorMessages.TimeZondIdNotFound, timeZoneInfo.Id));
            }

            return id;
        }

        /// <summary>
        /// Gets the Windows time zone id corresponds to a tz database id. 
        /// </summary>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <param name="windowsId">Windows time zone id corresponds to the tz database id.</param>
        /// <returns>true if the Windows time zone id is found, otherwise false.</returns>
        public static bool TryGetWindowsIdFromTimeZoneInfo(TimeZoneInfo timeZoneInfo, out string windowsId)
        {
            string id = timeZoneInfo.Id;

            if (WINDOWS_ID_TO_TZ_ID_MAP.ContainsKey(id))
            {
                windowsId = id;
                return true;
            }

            return TryGetWindowsIdFromTzId(id, out windowsId);
        }

        /// <summary>
        /// Gets the Windows time zone id corresponds to a tz database id. 
        /// </summary>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <returns>Windows time zone id corresponds to the tz database id.</returns>
        public static string GetWindowsIdFromTimeZoneInfo(TimeZoneInfo timeZoneInfo)
        {
            string id;

            if (!TryGetWindowsIdFromTimeZoneInfo(timeZoneInfo, out id))
            {
                throw new TimeZoneInfoNotFoundException(String.Format(ResourceMessage.ErrorMessages.TimeZondIdNotFound, timeZoneInfo.Id));
            }

            return id;
        }


        /// <summary>
        /// Gets System TimeZoneInfo.
        /// </summary>
        /// <param name="id">The time zone id.</param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <param name="exception"><see cref="Exception"/> which was thrown while finding TimeZone.</param>
        /// <returns>true if the <see cref="TimeZoneInfo"/> is found, otherwise false.</returns>
        private static bool tryGetSystemTimeZoneInfo(string id, out TimeZoneInfo timeZoneInfo, out Exception exception)
        {
            try
            {
                timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(id);
                exception = null;

                return true;
            }
            catch (Exception ex)
            {
                timeZoneInfo = null;
                exception = ex;
            }

            return false;
        }

        /// <summary>
        /// Gets System TimeZoneInfo.
        /// </summary>
        /// <param name="id">The time zone id.</param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <returns>true if the <see cref="TimeZoneInfo"/> is found, otherwise false.</returns>
        private static bool tryGetSystemTimeZoneInfo(string id, out TimeZoneInfo timeZoneInfo)
        {
            Exception exception;

            return tryGetSystemTimeZoneInfo(id, out timeZoneInfo, out exception);
        }

        /// <summary>
        /// Gets System TimeZoneInfo which has Tz database id.
        /// </summary>
        /// <param name="windowsId"></param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <param name="exception"><see cref="Exception"/> which was thrown while finding TimeZone.</param>
        /// <param name="preferredTzId">Preferred TzId type.</param>
        /// <returns>true if the <see cref="TimeZoneInfo"/> is found, otherwise false.</returns>
        private static bool tryGetTzTimeZoneInfoFromWindowsId(string windowsId, out TimeZoneInfo timeZoneInfo, out Exception exception, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            TimeZoneInfo tzi = null;
            Exception ex = null;

            string id;

            if (TryGetTzIdFromWindowsId(windowsId, out id, preferredTzId))
            {
                if (!tryGetSystemTimeZoneInfo(id, out tzi, out ex))
                {
                    string id2;

                    if (preferredTzId != PreferredTzId.Default && TryGetTzIdFromWindowsId(windowsId, out id2, PreferredTzId.Default) && id != id2)
                    {
                        tryGetSystemTimeZoneInfo(id2, out timeZoneInfo);
                    }
                }
            }

            timeZoneInfo = tzi;
            exception = ex;

            if (timeZoneInfo == null)
            {
                return false;
            }

            return true;
        }


        /// <summary>
        /// Gets <see cref="TimeZoneInfo"/> from tz database id.
        /// </summary>
        /// <param name="tzId">tz database id.</param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <returns>true if the <see cref="TimeZoneInfo"/> is found, otherwise false.</returns>
        public static bool TryGetTimeZoneInfoFromTzId(string tzId, out TimeZoneInfo timeZoneInfo)
        {
            try
            {
                timeZoneInfo = GetTimeZoneInfoFromTzId(tzId);

                return true;
            }
            catch (TimeZoneInfoNotFoundException)
            {
                timeZoneInfo = null;
                return false;
            }
        }


        /// <summary>
        /// Gets <see cref="TimeZoneInfo"/> from tz database id.
        /// </summary>
        /// <param name="tzId">tz database id.</param>
        /// <returns><see cref="TimeZoneInfo"/>.</returns>
        /// <exception cref="TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        public static TimeZoneInfo GetTimeZoneInfoFromTzId(string tzId)
        {
            TimeZoneInfo result = null;
            Exception exception = null;

            if (PRESUME_WINDOWS_TIME_ZONE_ENVIRONMENT)
            {
                string id;

                if (TryGetWindowsIdFromTzId(tzId, out id))
                {
                    if (!tryGetSystemTimeZoneInfo(id, out result, out exception))
                    {
                        tryGetSystemTimeZoneInfo(tzId, out result);
                    }
                }
                else
                {
                    tryGetSystemTimeZoneInfo(tzId, out result, out exception);
                }
            }
            else
            {
                if (!tryGetSystemTimeZoneInfo(tzId, out result, out exception))
                {
                    string id;

                    if (TryGetWindowsIdFromTzId(tzId, out id))
                    {
                        tryGetSystemTimeZoneInfo(id, out result);
                    }
                }
            }

            if (result == null)
            {
                string message = String.Format(ResourceMessage.ErrorMessages.TimeZoneInfoNotFoundForId, tzId);

                if (exception != null)
                {
                    throw new TimeZoneInfoNotFoundException(message, exception);
                }
                else
                {
                    throw new TimeZoneInfoNotFoundException(message);
                }
            }

            return result;
        }

        /// <summary>
        /// Gets <see cref="TimeZoneInfo"/> from tz database id.
        /// </summary>
        /// <param name="windowsId">tz database id.</param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <returns>true if the <see cref="TimeZoneInfo"/> is found, otherwise false.</returns>
        public static bool TryGetTimeZoneInfoFromWindowsId(string windowsId, out TimeZoneInfo timeZoneInfo)
        {
            try
            {
                timeZoneInfo = GetTimeZoneInfoFromWindowsId(windowsId);

                return true;
            }
            catch (TimeZoneInfoNotFoundException)
            {
                timeZoneInfo = null;
                return false;
            }
        }

        /// <summary>
        /// Gets <see cref="TimeZoneInfo"/> from Windows time zone id.
        /// </summary>
        /// <param name="windowsId">tz database id.</param>
        /// <returns><see cref="TimeZoneInfo"/>.</returns>
        /// <exception cref="TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        public static TimeZoneInfo GetTimeZoneInfoFromWindowsId(string windowsId, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            TimeZoneInfo result;
            Exception exception;

            if (PRESUME_WINDOWS_TIME_ZONE_ENVIRONMENT)
            {
                if (!tryGetSystemTimeZoneInfo(windowsId, out result, out exception))
                {
                    Exception ex;

                    tryGetTzTimeZoneInfoFromWindowsId(windowsId, out result, out ex, preferredTzId);
                }
            }
            else
            {
                if (!tryGetTzTimeZoneInfoFromWindowsId(windowsId, out result, out exception, preferredTzId))
                {
                    if (exception == null)
                    {
                        tryGetSystemTimeZoneInfo(windowsId, out result, out exception);
                    }
                    else
                    {
                        tryGetSystemTimeZoneInfo(windowsId, out result);
                    }
                }
            }

            if (result == null)
            {
                string message = String.Format(ResourceMessage.ErrorMessages.TimeZoneInfoNotFoundForId, windowsId);

                if (exception != null)
                {
                    throw new TimeZoneInfoNotFoundException(message, exception);
                }
                else
                {
                    throw new TimeZoneInfoNotFoundException(message);
                }
            }

            return result;
        }


        /// <summary>
        /// Gets <see cref="DateTimeOffset"/> for specified <see cref="DateTime"/> in the specified <see cref="TimeZoneInfo"/>.
        /// </summary>
        /// <param name="dateTime"><see cref="DateTime"/> to calculate <see cref="DateTimeOffset"/>.
        ///   <see cref="DateTimeKind"/> is important because there are ambiguous datetimes in some timezones(that has daylight saving time).
        ///   Please use UTC based <see cref="DateTime"/> with <see cref="DateTimeKind.Utc"/> if you want to get a certain datetime for these timezones.
        /// </param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/> to calculate <see cref="DateTimeOffset"/>.</param>
        /// <returns><see cref="DateTimeOffset"/>.</returns>
        /// <remarks>
        ///   <see cref="DateTimeKind"/> is important because there are ambiguous datetimes in some timezones(that has daylight saving time).
        ///   Please use UTC based <see cref="DateTime"/> with <see cref="DateTimeKind.Utc"/> if you want to get a certain datetime for these timezones.
        /// </remarks>
        public static DateTimeOffset GetDateTimeOffset(DateTime dateTime, TimeZoneInfo timeZoneInfo)
        {
            if (timeZoneInfo == null)
            {
                throw new ArgumentNullException("timeZoneInfo");
            }

            DateTime dateTimeAdjusted = dateTime;
            TimeSpan timeSpan = TimeSpan.Zero;

            if (dateTime.Kind != DateTimeKind.Unspecified)
            {
                if (dateTime.Kind == DateTimeKind.Utc && !(TimeZoneInfo.Utc.Equals(timeZoneInfo)))
                {
                    dateTimeAdjusted = TimeZoneInfo.ConvertTime(dateTime, TimeZoneInfo.Utc, timeZoneInfo);
                }
                else if (dateTime.Kind == DateTimeKind.Local && !(TimeZoneInfo.Local.Equals(timeZoneInfo)))
                {
                    dateTimeAdjusted = TimeZoneInfo.ConvertTime(dateTime, TimeZoneInfo.Local, timeZoneInfo);
                }
            }

            if (!(TimeZoneInfo.Utc.Equals(timeZoneInfo)))
            {
                if (dateTime.Kind == DateTimeKind.Utc)
                {
                    timeSpan = timeZoneInfo.GetUtcOffset(dateTime);
                }
                else
                {
                    timeSpan = timeZoneInfo.GetUtcOffset(dateTimeAdjusted);
                }
            }


            if (dateTimeAdjusted.Kind != DateTimeKind.Unspecified)
            {
                dateTimeAdjusted = DateTime.SpecifyKind(dateTimeAdjusted, DateTimeKind.Unspecified);
            }
            
            return new DateTimeOffset(dateTimeAdjusted, timeSpan);
        }

        /// <summary>
        /// Gets <see cref="DateTimeOffset"/> for specified <see cref="DateTimeOffset"/> in the specified <see cref="TimeZoneInfo"/>.
        /// </summary>
        /// <param name="dateTime"><see cref="DateTime"/> to calculate <see cref="DateTimeOffset"/>.</param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/> to calculate <see cref="DateTimeOffset"/>.</param>
        /// <returns><see cref="DateTimeOffset"/>.</returns>
        public static DateTimeOffset GetDateTimeOffset(DateTimeOffset dateTimeOffset, TimeZoneInfo timeZoneInfo)
        {
            return GetDateTimeOffset(dateTimeOffset.UtcDateTime, timeZoneInfo);
        }


        public static DateTimeOffset[] GetDateTimeOffsets(DateTime dateTime, TimeZoneInfo timeZoneInfo)
        {
            if (timeZoneInfo == null)
            {
                throw new ArgumentNullException("timeZoneInfo");
            }

            if(dateTime.Kind == DateTimeKind.Utc || !(timeZoneInfo.SupportsDaylightSavingTime))
            {
                return new DateTimeOffset[] { GetDateTimeOffset(dateTime, timeZoneInfo) };
            }

            DateTime dateTimeAdjusted = dateTime;

            if (dateTime.Kind == DateTimeKind.Local && !(TimeZoneInfo.Local.Equals(timeZoneInfo)))
            {
                dateTimeAdjusted = TimeZoneInfo.ConvertTime(dateTime, TimeZoneInfo.Local, timeZoneInfo);
            }

            if (dateTimeAdjusted.Kind != DateTimeKind.Unspecified)
            {
                dateTimeAdjusted = DateTime.SpecifyKind(dateTimeAdjusted, DateTimeKind.Unspecified);
            }

            if (TimeZoneInfo.Utc.Equals(timeZoneInfo))
            {
                return new DateTimeOffset[] { new DateTimeOffset(dateTimeAdjusted, TimeSpan.Zero) };
            }
            else if (!(timeZoneInfo.IsAmbiguousTime(dateTimeAdjusted)))
            {
                return new DateTimeOffset[] { new DateTimeOffset(dateTimeAdjusted, timeZoneInfo.GetUtcOffset(dateTimeAdjusted)) };
            }
            else
            {
                var timeSpans  = timeZoneInfo.GetAmbiguousTimeOffsets(dateTimeAdjusted);
                var results    = new List<DateTimeOffset>(2);
                var baseOffset = timeZoneInfo.BaseUtcOffset;

                foreach (var item in timeSpans)
                {
                    if(item == baseOffset)
                    {
                        results.Insert(0, new DateTimeOffset(dateTimeAdjusted, item));
                    }
                    else
                    {
                        results.Add(new DateTimeOffset(dateTimeAdjusted, item));
                    }
                }

                return results.ToArray();
            }
        }

    }
}
