/* 
 * MIT License
 * 
 * Copyright(c) 2020 thrzn41
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/************************************************/
/* This code was generated by Tool.TimeZoneMap. */
/************************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;

namespace Thrzn41.Util
{

    /// <summary>
    /// Utils for TimeZone.
    /// </summary>
    public static class TimeZoneUtils
    {
        /// <summary>
        /// Windows Id Version Tag.
        /// </summary>
        private const string WINDOWS_ID_VERSION_TAG = "7e11200";

        /// <summary>
        /// TzId Version Tag.
        /// </summary>
        private const string TZ_ID_VERSION_TAG = "2019b";

        /// <summary>
        /// Empty map.
        /// </summary>
        private static readonly ReadOnlyDictionary<string, string> EMPTY_MAP = new ReadOnlyDictionary<string, string>(new Dictionary<string, string>(0));


        /// <summary>
        /// Windows Id Version Tag.
        /// </summary>
        public static string WindowsIdVersionTag
        {
            get
            {
                return WINDOWS_ID_VERSION_TAG;
            }
        }

        /// <summary>
        /// TzId Version Tag.
        /// </summary>
        public static string TzIdVersionTag
        {
            get
            {
                return TZ_ID_VERSION_TAG;
            }
        }


#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)

        /// <summary>
        /// WindowsId to TzId map(Lazy Load).
        /// </summary>
        private static readonly Lazy<ReadOnlyDictionary<string, string>> LAZY_WINDOWS_ID_TO_TZ_ID_MAP;

        /// <summary>
        /// TzId to WindowsId map(Lazy Load).
        /// </summary>
        private static readonly Lazy<ReadOnlyDictionary<string, string>> LAZY_TZ_ID_TO_WINDOWS_ID_MAP;

        /// <summary>
        /// WindowsId to TzId map(Lazy Load).
        /// </summary>
        private static readonly Lazy<ReadOnlyDictionary<string, string>> LAZY_WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP;


        /// <summary>
        /// WindowsId to TzId map.
        /// </summary>
        private static ReadOnlyDictionary<string, string> WINDOWS_ID_TO_TZ_ID_MAP
        {
            get
            {
                return LAZY_WINDOWS_ID_TO_TZ_ID_MAP.Value;
            }
        }

        /// <summary>
        /// TzId to WindowsId map.
        /// </summary>
        private static ReadOnlyDictionary<string, string> TZ_ID_TO_WINDOWS_ID_MAP
        {
            get
            {
                return LAZY_TZ_ID_TO_WINDOWS_ID_MAP.Value;
            }
        }

        /// <summary>
        /// WindowsId to TzId map.
        /// </summary>
        private static ReadOnlyDictionary<string, string> WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP
        {
            get
            {
                return LAZY_WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP.Value;
            }
        }

#else
        /// <summary>
        /// WindowsId to TzId map.
        /// </summary>
        private static readonly ReadOnlyDictionary<string, string> WINDOWS_ID_TO_TZ_ID_MAP;

        /// <summary>
        /// TzId to WindowsId map.
        /// </summary>
        private static readonly ReadOnlyDictionary<string, string> TZ_ID_TO_WINDOWS_ID_MAP;

        /// <summary>
        /// WindowsId to TzId map.
        /// </summary>
        private static readonly ReadOnlyDictionary<string, string> WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP;
#endif

        /// <summary>
        /// Presume this environmet has windows time zone.
        /// </summary>
        private static readonly bool PRESUME_WINDOWS_TIME_ZONE_ENVIRONMENT;


#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)

        /// <summary>
        /// Slim Lock.
        /// </summary>
        private static readonly SlimLock LOCK = new CacheEnabledSlimLock();

        /// <summary>
        /// Init counter.
        /// </summary>
        private static int INIT_COUNT = 0;


#if (DOTNETSTANDARD1_3 || DOTNETSTANDARD2_0 || DOTNETCORE1_0 || DOTNETFRAMEWORK4_5_2 || DOTNETFRAMEWORK4_6_1)

        /// <summary>
        /// TimeZone id database to reduce reference count.
        /// </summary>
        private static Dictionary<string, string> TIME_ZONE_ID_DATABASE = null;

#else

        /// <summary>
        /// TimeZone id database to reduce reference count.
        /// </summary>
        private static HashSet<string> TIME_ZONE_ID_DATABASE = null;
    
#endif

        /// <summary>
        /// Try add to TimeZone Id map.
        /// </summary>
        /// <param name="dictionary">Target map.</param>
        /// <param name="key">The key.</param>
        /// <param name="value">The value for the key.</param>
        /// <returns>true if the key, value paire added to the map.</returns>
        private static bool TryAddToDictionary(Dictionary<string, string> dictionary, string key, string value)
        {
            if (!dictionary.ContainsKey(key))
            {
                dictionary.Add(key, value);
                return true;
            }

            return false;
        }


        /// <summary>
        /// Load TimeZone Id map from resource.
        /// </summary>
        /// <param name="timeZoneIdMap">TimeZone id map to be loaded.</param>
        /// <param name="resourceName">Source resource of the map.</param>
        private static void loadTimeZoneIdMap(Dictionary<string, string> timeZoneIdMap, string resourceName)
        {
            using (var lockW = LOCK.EnterLockedWriteBlock())
            using (var stream = (typeof(TimeZoneUtils)).GetTypeInfo().Assembly.GetManifestResourceStream(resourceName))
            using (var reader = new StreamReader(stream, UTF8Utils.UTF8_WITHOUT_BOM))
            {
                int index;
                string line, src, dest, rsrc, rdest;

                if (TIME_ZONE_ID_DATABASE == null)
                {
#if (DOTNETSTANDARD1_3 || DOTNETSTANDARD2_0 || DOTNETCORE1_0 || DOTNETFRAMEWORK4_5_2 || DOTNETFRAMEWORK4_6_1)
                    TIME_ZONE_ID_DATABASE = new Dictionary<string, string>(596);
#else
                    TIME_ZONE_ID_DATABASE = new HashSet<string>(596);
#endif
                }

                while (!reader.EndOfStream)
                {
                    line = reader.ReadLine();

                    if (!String.IsNullOrEmpty(line))
                    {
                        index = line.IndexOf(',');

                        if (index > 0)
                        {
                            src = line.Substring(0, index);
                            dest = line.Substring(index + 1);

                            if (!TIME_ZONE_ID_DATABASE.TryGetValue(src, out rsrc))
                            {
#if (DOTNETSTANDARD1_3 || DOTNETSTANDARD2_0 || DOTNETCORE1_0 || DOTNETFRAMEWORK4_5_2 || DOTNETFRAMEWORK4_6_1)
                                TryAddToDictionary(TIME_ZONE_ID_DATABASE, src, src);
#else
                                TIME_ZONE_ID_DATABASE.Add(src);
#endif
                                rsrc = src;
                            }

                            if (!TIME_ZONE_ID_DATABASE.TryGetValue(dest, out rdest))
                            {
#if (DOTNETSTANDARD1_3 || DOTNETSTANDARD2_0 || DOTNETCORE1_0 || DOTNETFRAMEWORK4_5_2 || DOTNETFRAMEWORK4_6_1)
                                TryAddToDictionary(TIME_ZONE_ID_DATABASE, dest, dest);
#else
                                TIME_ZONE_ID_DATABASE.Add(dest);
#endif
                                rdest = dest;
                            }

                            // timeZoneIdMap.TryAdd(rsrc, rdest);
                            TryAddToDictionary(timeZoneIdMap, rsrc, rdest);
                        }
                    }
                }

                INIT_COUNT++;

                if (INIT_COUNT >= 3)
                {
                    TIME_ZONE_ID_DATABASE.Clear();
#if !(DOTNETSTANDARD1_3 || DOTNETSTANDARD2_0 || DOTNETCORE1_0 || DOTNETFRAMEWORK4_5_2 || DOTNETFRAMEWORK4_6_1)
                    TIME_ZONE_ID_DATABASE.TrimExcess();
#endif
                    TIME_ZONE_ID_DATABASE = null;
                }
            }
        }

#endif

        /// <summary>
        /// Loads WindowsId to TzId TimeZone map.
        /// </summary>
        /// <returns></returns>
        private static ReadOnlyDictionary<string, string> loadWindowsIdToTzIdMap()
        {
            try
            {
                Dictionary<string, string> idMap;

#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)
                idMap = new Dictionary<string, string>(137);

                loadTimeZoneIdMap(idMap, "Thrzn41.Util.Resources.WindowsIdToTzId.dat");
#else
                idMap = new Dictionary<string, string>()
                {
                    { "Dateline Standard Time",          "Etc/GMT+12"             },
                    { "UTC-11",                          "Etc/GMT+11"             },
                    { "Aleutian Standard Time",          "America/Adak"           },
                    { "Hawaiian Standard Time",          "Pacific/Honolulu"       },
                    { "Marquesas Standard Time",         "Pacific/Marquesas"      },
                    { "Alaskan Standard Time",           "America/Anchorage"      },
                    { "UTC-09",                          "Etc/GMT+9"              },
                    { "Pacific Standard Time (Mexico)",  "America/Tijuana"        },
                    { "UTC-08",                          "Etc/GMT+8"              },
                    { "Pacific Standard Time",           "America/Los_Angeles"    },
                    { "US Mountain Standard Time",       "America/Phoenix"        },
                    { "Mountain Standard Time (Mexico)", "America/Chihuahua"      },
                    { "Mountain Standard Time",          "America/Denver"         },
                    { "Central America Standard Time",   "America/Guatemala"      },
                    { "Central Standard Time",           "America/Chicago"        },
                    { "Easter Island Standard Time",     "Pacific/Easter"         },
                    { "Central Standard Time (Mexico)",  "America/Mexico_City"    },
                    { "Canada Central Standard Time",    "America/Regina"         },
                    { "SA Pacific Standard Time",        "America/Bogota"         },
                    { "Eastern Standard Time (Mexico)",  "America/Cancun"         },
                    { "Eastern Standard Time",           "America/New_York"       },
                    { "Haiti Standard Time",             "America/Port-au-Prince" },
                    { "Cuba Standard Time",              "America/Havana"         },
                    { "US Eastern Standard Time",        "America/Indianapolis"   },
                    { "Turks And Caicos Standard Time",  "America/Grand_Turk"     },
                    { "Paraguay Standard Time",          "America/Asuncion"       },
                    { "Atlantic Standard Time",          "America/Halifax"        },
                    { "Venezuela Standard Time",         "America/Caracas"        },
                    { "Central Brazilian Standard Time", "America/Cuiaba"         },
                    { "SA Western Standard Time",        "America/La_Paz"         },
                    { "Pacific SA Standard Time",        "America/Santiago"       },
                    { "Newfoundland Standard Time",      "America/St_Johns"       },
                    { "Tocantins Standard Time",         "America/Araguaina"      },
                    { "E. South America Standard Time",  "America/Sao_Paulo"      },
                    { "SA Eastern Standard Time",        "America/Cayenne"        },
                    { "Argentina Standard Time",         "America/Buenos_Aires"   },
                    { "Greenland Standard Time",         "America/Godthab"        },
                    { "Montevideo Standard Time",        "America/Montevideo"     },
                    { "Magallanes Standard Time",        "America/Punta_Arenas"   },
                    { "Saint Pierre Standard Time",      "America/Miquelon"       },
                    { "Bahia Standard Time",             "America/Bahia"          },
                    { "UTC-02",                          "Etc/GMT+2"              },
                    { "Azores Standard Time",            "Atlantic/Azores"        },
                    { "Cape Verde Standard Time",        "Atlantic/Cape_Verde"    },
                    { "UTC",                             "Etc/GMT"                },
                    { "GMT Standard Time",               "Europe/London"          },
                    { "Greenwich Standard Time",         "Atlantic/Reykjavik"     },
                    { "Sao Tome Standard Time",          "Africa/Sao_Tome"        },
                    { "Morocco Standard Time",           "Africa/Casablanca"      },
                    { "W. Europe Standard Time",         "Europe/Berlin"          },
                    { "Central Europe Standard Time",    "Europe/Budapest"        },
                    { "Romance Standard Time",           "Europe/Paris"           },
                    { "Central European Standard Time",  "Europe/Warsaw"          },
                    { "W. Central Africa Standard Time", "Africa/Lagos"           },
                    { "Jordan Standard Time",            "Asia/Amman"             },
                    { "GTB Standard Time",               "Europe/Bucharest"       },
                    { "Middle East Standard Time",       "Asia/Beirut"            },
                    { "Egypt Standard Time",             "Africa/Cairo"           },
                    { "E. Europe Standard Time",         "Europe/Chisinau"        },
                    { "Syria Standard Time",             "Asia/Damascus"          },
                    { "West Bank Standard Time",         "Asia/Hebron"            },
                    { "South Africa Standard Time",      "Africa/Johannesburg"    },
                    { "FLE Standard Time",               "Europe/Kiev"            },
                    { "Israel Standard Time",            "Asia/Jerusalem"         },
                    { "Kaliningrad Standard Time",       "Europe/Kaliningrad"     },
                    { "Sudan Standard Time",             "Africa/Khartoum"        },
                    { "Libya Standard Time",             "Africa/Tripoli"         },
                    { "Namibia Standard Time",           "Africa/Windhoek"        },
                    { "Arabic Standard Time",            "Asia/Baghdad"           },
                    { "Turkey Standard Time",            "Europe/Istanbul"        },
                    { "Arab Standard Time",              "Asia/Riyadh"            },
                    { "Belarus Standard Time",           "Europe/Minsk"           },
                    { "Russian Standard Time",           "Europe/Moscow"          },
                    { "E. Africa Standard Time",         "Africa/Nairobi"         },
                    { "Iran Standard Time",              "Asia/Tehran"            },
                    { "Arabian Standard Time",           "Asia/Dubai"             },
                    { "Astrakhan Standard Time",         "Europe/Astrakhan"       },
                    { "Azerbaijan Standard Time",        "Asia/Baku"              },
                    { "Russia Time Zone 3",              "Europe/Samara"          },
                    { "Mauritius Standard Time",         "Indian/Mauritius"       },
                    { "Saratov Standard Time",           "Europe/Saratov"         },
                    { "Georgian Standard Time",          "Asia/Tbilisi"           },
                    { "Volgograd Standard Time",         "Europe/Volgograd"       },
                    { "Caucasus Standard Time",          "Asia/Yerevan"           },
                    { "Afghanistan Standard Time",       "Asia/Kabul"             },
                    { "West Asia Standard Time",         "Asia/Tashkent"          },
                    { "Ekaterinburg Standard Time",      "Asia/Yekaterinburg"     },
                    { "Pakistan Standard Time",          "Asia/Karachi"           },
                    { "Qyzylorda Standard Time",         "Asia/Qyzylorda"         },
                    { "India Standard Time",             "Asia/Calcutta"          },
                    { "Sri Lanka Standard Time",         "Asia/Colombo"           },
                    { "Nepal Standard Time",             "Asia/Katmandu"          },
                    { "Central Asia Standard Time",      "Asia/Almaty"            },
                    { "Bangladesh Standard Time",        "Asia/Dhaka"             },
                    { "Omsk Standard Time",              "Asia/Omsk"              },
                    { "Myanmar Standard Time",           "Asia/Rangoon"           },
                    { "SE Asia Standard Time",           "Asia/Bangkok"           },
                    { "Altai Standard Time",             "Asia/Barnaul"           },
                    { "W. Mongolia Standard Time",       "Asia/Hovd"              },
                    { "North Asia Standard Time",        "Asia/Krasnoyarsk"       },
                    { "N. Central Asia Standard Time",   "Asia/Novosibirsk"       },
                    { "Tomsk Standard Time",             "Asia/Tomsk"             },
                    { "China Standard Time",             "Asia/Shanghai"          },
                    { "North Asia East Standard Time",   "Asia/Irkutsk"           },
                    { "Singapore Standard Time",         "Asia/Singapore"         },
                    { "W. Australia Standard Time",      "Australia/Perth"        },
                    { "Taipei Standard Time",            "Asia/Taipei"            },
                    { "Ulaanbaatar Standard Time",       "Asia/Ulaanbaatar"       },
                    { "Aus Central W. Standard Time",    "Australia/Eucla"        },
                    { "Transbaikal Standard Time",       "Asia/Chita"             },
                    { "Tokyo Standard Time",             "Asia/Tokyo"             },
                    { "North Korea Standard Time",       "Asia/Pyongyang"         },
                    { "Korea Standard Time",             "Asia/Seoul"             },
                    { "Yakutsk Standard Time",           "Asia/Yakutsk"           },
                    { "Cen. Australia Standard Time",    "Australia/Adelaide"     },
                    { "AUS Central Standard Time",       "Australia/Darwin"       },
                    { "E. Australia Standard Time",      "Australia/Brisbane"     },
                    { "AUS Eastern Standard Time",       "Australia/Sydney"       },
                    { "West Pacific Standard Time",      "Pacific/Port_Moresby"   },
                    { "Tasmania Standard Time",          "Australia/Hobart"       },
                    { "Vladivostok Standard Time",       "Asia/Vladivostok"       },
                    { "Lord Howe Standard Time",         "Australia/Lord_Howe"    },
                    { "Bougainville Standard Time",      "Pacific/Bougainville"   },
                    { "Russia Time Zone 10",             "Asia/Srednekolymsk"     },
                    { "Magadan Standard Time",           "Asia/Magadan"           },
                    { "Norfolk Standard Time",           "Pacific/Norfolk"        },
                    { "Sakhalin Standard Time",          "Asia/Sakhalin"          },
                    { "Central Pacific Standard Time",   "Pacific/Guadalcanal"    },
                    { "Russia Time Zone 11",             "Asia/Kamchatka"         },
                    { "New Zealand Standard Time",       "Pacific/Auckland"       },
                    { "UTC+12",                          "Etc/GMT-12"             },
                    { "Fiji Standard Time",              "Pacific/Fiji"           },
                    { "Chatham Islands Standard Time",   "Pacific/Chatham"        },
                    { "UTC+13",                          "Etc/GMT-13"             },
                    { "Tonga Standard Time",             "Pacific/Tongatapu"      },
                    { "Samoa Standard Time",             "Pacific/Apia"           },
                    { "Line Islands Standard Time",      "Pacific/Kiritimati"     },
                };
#endif

                return new ReadOnlyDictionary<string, string>(idMap);
            }
            catch (Exception)
            {
                return EMPTY_MAP;
            }
        }

        /// <summary>
        /// Loads TzId to WindowsId TimeZone map.
        /// </summary>
        /// <returns></returns>
        private static ReadOnlyDictionary<string, string> loadTzIdToWindowsIdMap()
        {
            try
            {
                Dictionary<string, string> idMap;

#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)
                idMap = new Dictionary<string, string>(459);

                loadTimeZoneIdMap(idMap, "Thrzn41.Util.Resources.TzIdToWindowsId.dat");
#else
                idMap = new Dictionary<string, string>()
                {
                    { "Etc/GMT+12",                     "Dateline Standard Time"          },
                    { "Etc/GMT+11",                     "UTC-11"                          },
                    { "America/Adak",                   "Aleutian Standard Time"          },
                    { "Pacific/Honolulu",               "Hawaiian Standard Time"          },
                    { "Pacific/Marquesas",              "Marquesas Standard Time"         },
                    { "America/Anchorage",              "Alaskan Standard Time"           },
                    { "Etc/GMT+9",                      "UTC-09"                          },
                    { "America/Tijuana",                "Pacific Standard Time (Mexico)"  },
                    { "Etc/GMT+8",                      "UTC-08"                          },
                    { "America/Los_Angeles",            "Pacific Standard Time"           },
                    { "America/Phoenix",                "US Mountain Standard Time"       },
                    { "America/Chihuahua",              "Mountain Standard Time (Mexico)" },
                    { "America/Denver",                 "Mountain Standard Time"          },
                    { "America/Guatemala",              "Central America Standard Time"   },
                    { "America/Chicago",                "Central Standard Time"           },
                    { "Pacific/Easter",                 "Easter Island Standard Time"     },
                    { "America/Mexico_City",            "Central Standard Time (Mexico)"  },
                    { "America/Regina",                 "Canada Central Standard Time"    },
                    { "America/Bogota",                 "SA Pacific Standard Time"        },
                    { "America/Cancun",                 "Eastern Standard Time (Mexico)"  },
                    { "America/New_York",               "Eastern Standard Time"           },
                    { "America/Port-au-Prince",         "Haiti Standard Time"             },
                    { "America/Havana",                 "Cuba Standard Time"              },
                    { "America/Indianapolis",           "US Eastern Standard Time"        },
                    { "America/Grand_Turk",             "Turks And Caicos Standard Time"  },
                    { "America/Asuncion",               "Paraguay Standard Time"          },
                    { "America/Halifax",                "Atlantic Standard Time"          },
                    { "America/Caracas",                "Venezuela Standard Time"         },
                    { "America/Cuiaba",                 "Central Brazilian Standard Time" },
                    { "America/La_Paz",                 "SA Western Standard Time"        },
                    { "America/Santiago",               "Pacific SA Standard Time"        },
                    { "America/St_Johns",               "Newfoundland Standard Time"      },
                    { "America/Araguaina",              "Tocantins Standard Time"         },
                    { "America/Sao_Paulo",              "E. South America Standard Time"  },
                    { "America/Cayenne",                "SA Eastern Standard Time"        },
                    { "America/Buenos_Aires",           "Argentina Standard Time"         },
                    { "America/Godthab",                "Greenland Standard Time"         },
                    { "America/Montevideo",             "Montevideo Standard Time"        },
                    { "America/Punta_Arenas",           "Magallanes Standard Time"        },
                    { "America/Miquelon",               "Saint Pierre Standard Time"      },
                    { "America/Bahia",                  "Bahia Standard Time"             },
                    { "Etc/GMT+2",                      "UTC-02"                          },
                    { "Atlantic/Azores",                "Azores Standard Time"            },
                    { "Atlantic/Cape_Verde",            "Cape Verde Standard Time"        },
                    { "Etc/GMT",                        "UTC"                             },
                    { "Europe/London",                  "GMT Standard Time"               },
                    { "Atlantic/Reykjavik",             "Greenwich Standard Time"         },
                    { "Africa/Sao_Tome",                "Sao Tome Standard Time"          },
                    { "Africa/Casablanca",              "Morocco Standard Time"           },
                    { "Europe/Berlin",                  "W. Europe Standard Time"         },
                    { "Europe/Budapest",                "Central Europe Standard Time"    },
                    { "Europe/Paris",                   "Romance Standard Time"           },
                    { "Europe/Warsaw",                  "Central European Standard Time"  },
                    { "Africa/Lagos",                   "W. Central Africa Standard Time" },
                    { "Asia/Amman",                     "Jordan Standard Time"            },
                    { "Europe/Bucharest",               "GTB Standard Time"               },
                    { "Asia/Beirut",                    "Middle East Standard Time"       },
                    { "Africa/Cairo",                   "Egypt Standard Time"             },
                    { "Europe/Chisinau",                "E. Europe Standard Time"         },
                    { "Asia/Damascus",                  "Syria Standard Time"             },
                    { "Asia/Hebron",                    "West Bank Standard Time"         },
                    { "Africa/Johannesburg",            "South Africa Standard Time"      },
                    { "Europe/Kiev",                    "FLE Standard Time"               },
                    { "Asia/Jerusalem",                 "Israel Standard Time"            },
                    { "Europe/Kaliningrad",             "Kaliningrad Standard Time"       },
                    { "Africa/Khartoum",                "Sudan Standard Time"             },
                    { "Africa/Tripoli",                 "Libya Standard Time"             },
                    { "Africa/Windhoek",                "Namibia Standard Time"           },
                    { "Asia/Baghdad",                   "Arabic Standard Time"            },
                    { "Europe/Istanbul",                "Turkey Standard Time"            },
                    { "Asia/Riyadh",                    "Arab Standard Time"              },
                    { "Europe/Minsk",                   "Belarus Standard Time"           },
                    { "Europe/Moscow",                  "Russian Standard Time"           },
                    { "Africa/Nairobi",                 "E. Africa Standard Time"         },
                    { "Asia/Tehran",                    "Iran Standard Time"              },
                    { "Asia/Dubai",                     "Arabian Standard Time"           },
                    { "Europe/Astrakhan",               "Astrakhan Standard Time"         },
                    { "Asia/Baku",                      "Azerbaijan Standard Time"        },
                    { "Europe/Samara",                  "Russia Time Zone 3"              },
                    { "Indian/Mauritius",               "Mauritius Standard Time"         },
                    { "Europe/Saratov",                 "Saratov Standard Time"           },
                    { "Asia/Tbilisi",                   "Georgian Standard Time"          },
                    { "Europe/Volgograd",               "Volgograd Standard Time"         },
                    { "Asia/Yerevan",                   "Caucasus Standard Time"          },
                    { "Asia/Kabul",                     "Afghanistan Standard Time"       },
                    { "Asia/Tashkent",                  "West Asia Standard Time"         },
                    { "Asia/Yekaterinburg",             "Ekaterinburg Standard Time"      },
                    { "Asia/Karachi",                   "Pakistan Standard Time"          },
                    { "Asia/Qyzylorda",                 "Qyzylorda Standard Time"         },
                    { "Asia/Calcutta",                  "India Standard Time"             },
                    { "Asia/Colombo",                   "Sri Lanka Standard Time"         },
                    { "Asia/Katmandu",                  "Nepal Standard Time"             },
                    { "Asia/Almaty",                    "Central Asia Standard Time"      },
                    { "Asia/Dhaka",                     "Bangladesh Standard Time"        },
                    { "Asia/Omsk",                      "Omsk Standard Time"              },
                    { "Asia/Rangoon",                   "Myanmar Standard Time"           },
                    { "Asia/Bangkok",                   "SE Asia Standard Time"           },
                    { "Asia/Barnaul",                   "Altai Standard Time"             },
                    { "Asia/Hovd",                      "W. Mongolia Standard Time"       },
                    { "Asia/Krasnoyarsk",               "North Asia Standard Time"        },
                    { "Asia/Novosibirsk",               "N. Central Asia Standard Time"   },
                    { "Asia/Tomsk",                     "Tomsk Standard Time"             },
                    { "Asia/Shanghai",                  "China Standard Time"             },
                    { "Asia/Irkutsk",                   "North Asia East Standard Time"   },
                    { "Asia/Singapore",                 "Singapore Standard Time"         },
                    { "Australia/Perth",                "W. Australia Standard Time"      },
                    { "Asia/Taipei",                    "Taipei Standard Time"            },
                    { "Asia/Ulaanbaatar",               "Ulaanbaatar Standard Time"       },
                    { "Australia/Eucla",                "Aus Central W. Standard Time"    },
                    { "Asia/Chita",                     "Transbaikal Standard Time"       },
                    { "Asia/Tokyo",                     "Tokyo Standard Time"             },
                    { "Asia/Pyongyang",                 "North Korea Standard Time"       },
                    { "Asia/Seoul",                     "Korea Standard Time"             },
                    { "Asia/Yakutsk",                   "Yakutsk Standard Time"           },
                    { "Australia/Adelaide",             "Cen. Australia Standard Time"    },
                    { "Australia/Darwin",               "AUS Central Standard Time"       },
                    { "Australia/Brisbane",             "E. Australia Standard Time"      },
                    { "Australia/Sydney",               "AUS Eastern Standard Time"       },
                    { "Pacific/Port_Moresby",           "West Pacific Standard Time"      },
                    { "Australia/Hobart",               "Tasmania Standard Time"          },
                    { "Asia/Vladivostok",               "Vladivostok Standard Time"       },
                    { "Australia/Lord_Howe",            "Lord Howe Standard Time"         },
                    { "Pacific/Bougainville",           "Bougainville Standard Time"      },
                    { "Asia/Srednekolymsk",             "Russia Time Zone 10"             },
                    { "Asia/Magadan",                   "Magadan Standard Time"           },
                    { "Pacific/Norfolk",                "Norfolk Standard Time"           },
                    { "Asia/Sakhalin",                  "Sakhalin Standard Time"          },
                    { "Pacific/Guadalcanal",            "Central Pacific Standard Time"   },
                    { "Asia/Kamchatka",                 "Russia Time Zone 11"             },
                    { "Pacific/Auckland",               "New Zealand Standard Time"       },
                    { "Etc/GMT-12",                     "UTC+12"                          },
                    { "Pacific/Fiji",                   "Fiji Standard Time"              },
                    { "Pacific/Chatham",                "Chatham Islands Standard Time"   },
                    { "Etc/GMT-13",                     "UTC+13"                          },
                    { "Pacific/Tongatapu",              "Tonga Standard Time"             },
                    { "Pacific/Apia",                   "Samoa Standard Time"             },
                    { "Pacific/Kiritimati",             "Line Islands Standard Time"      },
                    { "Pacific/Pago_Pago",              "UTC-11"                          },
                    { "Pacific/Niue",                   "UTC-11"                          },
                    { "Pacific/Midway",                 "UTC-11"                          },
                    { "Pacific/Rarotonga",              "Hawaiian Standard Time"          },
                    { "Pacific/Tahiti",                 "Hawaiian Standard Time"          },
                    { "Pacific/Johnston",               "Hawaiian Standard Time"          },
                    { "Etc/GMT+10",                     "Hawaiian Standard Time"          },
                    { "America/Juneau",                 "Alaskan Standard Time"           },
                    { "America/Metlakatla",             "Alaskan Standard Time"           },
                    { "America/Nome",                   "Alaskan Standard Time"           },
                    { "America/Sitka",                  "Alaskan Standard Time"           },
                    { "America/Yakutat",                "Alaskan Standard Time"           },
                    { "Pacific/Gambier",                "UTC-09"                          },
                    { "America/Santa_Isabel",           "Pacific Standard Time (Mexico)"  },
                    { "Pacific/Pitcairn",               "UTC-08"                          },
                    { "America/Vancouver",              "Pacific Standard Time"           },
                    { "PST8PDT",                        "Pacific Standard Time"           },
                    { "America/Whitehorse",             "US Mountain Standard Time"       },
                    { "America/Creston",                "US Mountain Standard Time"       },
                    { "America/Dawson",                 "US Mountain Standard Time"       },
                    { "America/Dawson_Creek",           "US Mountain Standard Time"       },
                    { "America/Fort_Nelson",            "US Mountain Standard Time"       },
                    { "America/Hermosillo",             "US Mountain Standard Time"       },
                    { "Etc/GMT+7",                      "US Mountain Standard Time"       },
                    { "America/Mazatlan",               "Mountain Standard Time (Mexico)" },
                    { "America/Edmonton",               "Mountain Standard Time"          },
                    { "America/Cambridge_Bay",          "Mountain Standard Time"          },
                    { "America/Inuvik",                 "Mountain Standard Time"          },
                    { "America/Yellowknife",            "Mountain Standard Time"          },
                    { "America/Ojinaga",                "Mountain Standard Time"          },
                    { "America/Boise",                  "Mountain Standard Time"          },
                    { "MST7MDT",                        "Mountain Standard Time"          },
                    { "America/Belize",                 "Central America Standard Time"   },
                    { "America/Costa_Rica",             "Central America Standard Time"   },
                    { "Pacific/Galapagos",              "Central America Standard Time"   },
                    { "America/Tegucigalpa",            "Central America Standard Time"   },
                    { "America/Managua",                "Central America Standard Time"   },
                    { "America/El_Salvador",            "Central America Standard Time"   },
                    { "Etc/GMT+6",                      "Central America Standard Time"   },
                    { "America/Winnipeg",               "Central Standard Time"           },
                    { "America/Rainy_River",            "Central Standard Time"           },
                    { "America/Rankin_Inlet",           "Central Standard Time"           },
                    { "America/Resolute",               "Central Standard Time"           },
                    { "America/Matamoros",              "Central Standard Time"           },
                    { "America/Indiana/Knox",           "Central Standard Time"           },
                    { "America/Indiana/Tell_City",      "Central Standard Time"           },
                    { "America/Menominee",              "Central Standard Time"           },
                    { "America/North_Dakota/Beulah",    "Central Standard Time"           },
                    { "America/North_Dakota/Center",    "Central Standard Time"           },
                    { "America/North_Dakota/New_Salem", "Central Standard Time"           },
                    { "CST6CDT",                        "Central Standard Time"           },
                    { "America/Bahia_Banderas",         "Central Standard Time (Mexico)"  },
                    { "America/Merida",                 "Central Standard Time (Mexico)"  },
                    { "America/Monterrey",              "Central Standard Time (Mexico)"  },
                    { "America/Swift_Current",          "Canada Central Standard Time"    },
                    { "America/Rio_Branco",             "SA Pacific Standard Time"        },
                    { "America/Eirunepe",               "SA Pacific Standard Time"        },
                    { "America/Coral_Harbour",          "SA Pacific Standard Time"        },
                    { "America/Guayaquil",              "SA Pacific Standard Time"        },
                    { "America/Jamaica",                "SA Pacific Standard Time"        },
                    { "America/Cayman",                 "SA Pacific Standard Time"        },
                    { "America/Panama",                 "SA Pacific Standard Time"        },
                    { "America/Lima",                   "SA Pacific Standard Time"        },
                    { "Etc/GMT+5",                      "SA Pacific Standard Time"        },
                    { "America/Nassau",                 "Eastern Standard Time"           },
                    { "America/Toronto",                "Eastern Standard Time"           },
                    { "America/Iqaluit",                "Eastern Standard Time"           },
                    { "America/Montreal",               "Eastern Standard Time"           },
                    { "America/Nipigon",                "Eastern Standard Time"           },
                    { "America/Pangnirtung",            "Eastern Standard Time"           },
                    { "America/Thunder_Bay",            "Eastern Standard Time"           },
                    { "America/Detroit",                "Eastern Standard Time"           },
                    { "America/Indiana/Petersburg",     "Eastern Standard Time"           },
                    { "America/Indiana/Vincennes",      "Eastern Standard Time"           },
                    { "America/Indiana/Winamac",        "Eastern Standard Time"           },
                    { "America/Kentucky/Monticello",    "Eastern Standard Time"           },
                    { "America/Louisville",             "Eastern Standard Time"           },
                    { "EST5EDT",                        "Eastern Standard Time"           },
                    { "America/Indiana/Marengo",        "US Eastern Standard Time"        },
                    { "America/Indiana/Vevay",          "US Eastern Standard Time"        },
                    { "Atlantic/Bermuda",               "Atlantic Standard Time"          },
                    { "America/Glace_Bay",              "Atlantic Standard Time"          },
                    { "America/Goose_Bay",              "Atlantic Standard Time"          },
                    { "America/Moncton",                "Atlantic Standard Time"          },
                    { "America/Thule",                  "Atlantic Standard Time"          },
                    { "America/Campo_Grande",           "Central Brazilian Standard Time" },
                    { "America/Antigua",                "SA Western Standard Time"        },
                    { "America/Anguilla",               "SA Western Standard Time"        },
                    { "America/Aruba",                  "SA Western Standard Time"        },
                    { "America/Barbados",               "SA Western Standard Time"        },
                    { "America/St_Barthelemy",          "SA Western Standard Time"        },
                    { "America/Kralendijk",             "SA Western Standard Time"        },
                    { "America/Manaus",                 "SA Western Standard Time"        },
                    { "America/Boa_Vista",              "SA Western Standard Time"        },
                    { "America/Porto_Velho",            "SA Western Standard Time"        },
                    { "America/Blanc-Sablon",           "SA Western Standard Time"        },
                    { "America/Curacao",                "SA Western Standard Time"        },
                    { "America/Dominica",               "SA Western Standard Time"        },
                    { "America/Santo_Domingo",          "SA Western Standard Time"        },
                    { "America/Grenada",                "SA Western Standard Time"        },
                    { "America/Guadeloupe",             "SA Western Standard Time"        },
                    { "America/Guyana",                 "SA Western Standard Time"        },
                    { "America/St_Kitts",               "SA Western Standard Time"        },
                    { "America/St_Lucia",               "SA Western Standard Time"        },
                    { "America/Marigot",                "SA Western Standard Time"        },
                    { "America/Martinique",             "SA Western Standard Time"        },
                    { "America/Montserrat",             "SA Western Standard Time"        },
                    { "America/Puerto_Rico",            "SA Western Standard Time"        },
                    { "America/Lower_Princes",          "SA Western Standard Time"        },
                    { "America/Port_of_Spain",          "SA Western Standard Time"        },
                    { "America/St_Vincent",             "SA Western Standard Time"        },
                    { "America/Tortola",                "SA Western Standard Time"        },
                    { "America/St_Thomas",              "SA Western Standard Time"        },
                    { "Etc/GMT+4",                      "SA Western Standard Time"        },
                    { "Antarctica/Rothera",             "SA Eastern Standard Time"        },
                    { "Antarctica/Palmer",              "SA Eastern Standard Time"        },
                    { "America/Fortaleza",              "SA Eastern Standard Time"        },
                    { "America/Belem",                  "SA Eastern Standard Time"        },
                    { "America/Maceio",                 "SA Eastern Standard Time"        },
                    { "America/Recife",                 "SA Eastern Standard Time"        },
                    { "America/Santarem",               "SA Eastern Standard Time"        },
                    { "Atlantic/Stanley",               "SA Eastern Standard Time"        },
                    { "America/Paramaribo",             "SA Eastern Standard Time"        },
                    { "Etc/GMT+3",                      "SA Eastern Standard Time"        },
                    { "America/Argentina/La_Rioja",     "Argentina Standard Time"         },
                    { "America/Argentina/Rio_Gallegos", "Argentina Standard Time"         },
                    { "America/Argentina/Salta",        "Argentina Standard Time"         },
                    { "America/Argentina/San_Juan",     "Argentina Standard Time"         },
                    { "America/Argentina/San_Luis",     "Argentina Standard Time"         },
                    { "America/Argentina/Tucuman",      "Argentina Standard Time"         },
                    { "America/Argentina/Ushuaia",      "Argentina Standard Time"         },
                    { "America/Catamarca",              "Argentina Standard Time"         },
                    { "America/Cordoba",                "Argentina Standard Time"         },
                    { "America/Jujuy",                  "Argentina Standard Time"         },
                    { "America/Mendoza",                "Argentina Standard Time"         },
                    { "America/Noronha",                "UTC-02"                          },
                    { "Atlantic/South_Georgia",         "UTC-02"                          },
                    { "America/Scoresbysund",           "Azores Standard Time"            },
                    { "Etc/GMT+1",                      "Cape Verde Standard Time"        },
                    { "America/Danmarkshavn",           "UTC"                             },
                    { "Etc/UTC",                        "UTC"                             },
                    { "Atlantic/Canary",                "GMT Standard Time"               },
                    { "Atlantic/Faeroe",                "GMT Standard Time"               },
                    { "Europe/Guernsey",                "GMT Standard Time"               },
                    { "Europe/Dublin",                  "GMT Standard Time"               },
                    { "Europe/Isle_of_Man",             "GMT Standard Time"               },
                    { "Europe/Jersey",                  "GMT Standard Time"               },
                    { "Europe/Lisbon",                  "GMT Standard Time"               },
                    { "Atlantic/Madeira",               "GMT Standard Time"               },
                    { "Africa/Ouagadougou",             "Greenwich Standard Time"         },
                    { "Africa/Abidjan",                 "Greenwich Standard Time"         },
                    { "Africa/Accra",                   "Greenwich Standard Time"         },
                    { "Africa/Banjul",                  "Greenwich Standard Time"         },
                    { "Africa/Conakry",                 "Greenwich Standard Time"         },
                    { "Africa/Bissau",                  "Greenwich Standard Time"         },
                    { "Africa/Monrovia",                "Greenwich Standard Time"         },
                    { "Africa/Bamako",                  "Greenwich Standard Time"         },
                    { "Africa/Nouakchott",              "Greenwich Standard Time"         },
                    { "Atlantic/St_Helena",             "Greenwich Standard Time"         },
                    { "Africa/Freetown",                "Greenwich Standard Time"         },
                    { "Africa/Dakar",                   "Greenwich Standard Time"         },
                    { "Africa/Lome",                    "Greenwich Standard Time"         },
                    { "Africa/El_Aaiun",                "Morocco Standard Time"           },
                    { "Europe/Andorra",                 "W. Europe Standard Time"         },
                    { "Europe/Vienna",                  "W. Europe Standard Time"         },
                    { "Europe/Zurich",                  "W. Europe Standard Time"         },
                    { "Europe/Busingen",                "W. Europe Standard Time"         },
                    { "Europe/Gibraltar",               "W. Europe Standard Time"         },
                    { "Europe/Rome",                    "W. Europe Standard Time"         },
                    { "Europe/Vaduz",                   "W. Europe Standard Time"         },
                    { "Europe/Luxembourg",              "W. Europe Standard Time"         },
                    { "Europe/Monaco",                  "W. Europe Standard Time"         },
                    { "Europe/Malta",                   "W. Europe Standard Time"         },
                    { "Europe/Amsterdam",               "W. Europe Standard Time"         },
                    { "Europe/Oslo",                    "W. Europe Standard Time"         },
                    { "Europe/Stockholm",               "W. Europe Standard Time"         },
                    { "Arctic/Longyearbyen",            "W. Europe Standard Time"         },
                    { "Europe/San_Marino",              "W. Europe Standard Time"         },
                    { "Europe/Vatican",                 "W. Europe Standard Time"         },
                    { "Europe/Tirane",                  "Central Europe Standard Time"    },
                    { "Europe/Prague",                  "Central Europe Standard Time"    },
                    { "Europe/Podgorica",               "Central Europe Standard Time"    },
                    { "Europe/Belgrade",                "Central Europe Standard Time"    },
                    { "Europe/Ljubljana",               "Central Europe Standard Time"    },
                    { "Europe/Bratislava",              "Central Europe Standard Time"    },
                    { "Europe/Brussels",                "Romance Standard Time"           },
                    { "Europe/Copenhagen",              "Romance Standard Time"           },
                    { "Europe/Madrid",                  "Romance Standard Time"           },
                    { "Africa/Ceuta",                   "Romance Standard Time"           },
                    { "Europe/Sarajevo",                "Central European Standard Time"  },
                    { "Europe/Zagreb",                  "Central European Standard Time"  },
                    { "Europe/Skopje",                  "Central European Standard Time"  },
                    { "Africa/Luanda",                  "W. Central Africa Standard Time" },
                    { "Africa/Porto-Novo",              "W. Central Africa Standard Time" },
                    { "Africa/Kinshasa",                "W. Central Africa Standard Time" },
                    { "Africa/Bangui",                  "W. Central Africa Standard Time" },
                    { "Africa/Brazzaville",             "W. Central Africa Standard Time" },
                    { "Africa/Douala",                  "W. Central Africa Standard Time" },
                    { "Africa/Algiers",                 "W. Central Africa Standard Time" },
                    { "Africa/Libreville",              "W. Central Africa Standard Time" },
                    { "Africa/Malabo",                  "W. Central Africa Standard Time" },
                    { "Africa/Niamey",                  "W. Central Africa Standard Time" },
                    { "Africa/Ndjamena",                "W. Central Africa Standard Time" },
                    { "Africa/Tunis",                   "W. Central Africa Standard Time" },
                    { "Etc/GMT-1",                      "W. Central Africa Standard Time" },
                    { "Asia/Nicosia",                   "GTB Standard Time"               },
                    { "Asia/Famagusta",                 "GTB Standard Time"               },
                    { "Europe/Athens",                  "GTB Standard Time"               },
                    { "Asia/Gaza",                      "West Bank Standard Time"         },
                    { "Africa/Bujumbura",               "South Africa Standard Time"      },
                    { "Africa/Gaborone",                "South Africa Standard Time"      },
                    { "Africa/Lubumbashi",              "South Africa Standard Time"      },
                    { "Africa/Maseru",                  "South Africa Standard Time"      },
                    { "Africa/Blantyre",                "South Africa Standard Time"      },
                    { "Africa/Maputo",                  "South Africa Standard Time"      },
                    { "Africa/Kigali",                  "South Africa Standard Time"      },
                    { "Africa/Mbabane",                 "South Africa Standard Time"      },
                    { "Africa/Lusaka",                  "South Africa Standard Time"      },
                    { "Africa/Harare",                  "South Africa Standard Time"      },
                    { "Etc/GMT-2",                      "South Africa Standard Time"      },
                    { "Europe/Mariehamn",               "FLE Standard Time"               },
                    { "Europe/Sofia",                   "FLE Standard Time"               },
                    { "Europe/Tallinn",                 "FLE Standard Time"               },
                    { "Europe/Helsinki",                "FLE Standard Time"               },
                    { "Europe/Vilnius",                 "FLE Standard Time"               },
                    { "Europe/Riga",                    "FLE Standard Time"               },
                    { "Europe/Uzhgorod",                "FLE Standard Time"               },
                    { "Europe/Zaporozhye",              "FLE Standard Time"               },
                    { "Asia/Bahrain",                   "Arab Standard Time"              },
                    { "Asia/Kuwait",                    "Arab Standard Time"              },
                    { "Asia/Qatar",                     "Arab Standard Time"              },
                    { "Asia/Aden",                      "Arab Standard Time"              },
                    { "Europe/Kirov",                   "Russian Standard Time"           },
                    { "Europe/Simferopol",              "Russian Standard Time"           },
                    { "Antarctica/Syowa",               "E. Africa Standard Time"         },
                    { "Africa/Djibouti",                "E. Africa Standard Time"         },
                    { "Africa/Asmera",                  "E. Africa Standard Time"         },
                    { "Africa/Addis_Ababa",             "E. Africa Standard Time"         },
                    { "Indian/Comoro",                  "E. Africa Standard Time"         },
                    { "Indian/Antananarivo",            "E. Africa Standard Time"         },
                    { "Africa/Mogadishu",               "E. Africa Standard Time"         },
                    { "Africa/Juba",                    "E. Africa Standard Time"         },
                    { "Africa/Dar_es_Salaam",           "E. Africa Standard Time"         },
                    { "Africa/Kampala",                 "E. Africa Standard Time"         },
                    { "Indian/Mayotte",                 "E. Africa Standard Time"         },
                    { "Etc/GMT-3",                      "E. Africa Standard Time"         },
                    { "Asia/Muscat",                    "Arabian Standard Time"           },
                    { "Etc/GMT-4",                      "Arabian Standard Time"           },
                    { "Europe/Ulyanovsk",               "Astrakhan Standard Time"         },
                    { "Indian/Reunion",                 "Mauritius Standard Time"         },
                    { "Indian/Mahe",                    "Mauritius Standard Time"         },
                    { "Antarctica/Mawson",              "West Asia Standard Time"         },
                    { "Asia/Oral",                      "West Asia Standard Time"         },
                    { "Asia/Aqtau",                     "West Asia Standard Time"         },
                    { "Asia/Aqtobe",                    "West Asia Standard Time"         },
                    { "Asia/Atyrau",                    "West Asia Standard Time"         },
                    { "Indian/Maldives",                "West Asia Standard Time"         },
                    { "Indian/Kerguelen",               "West Asia Standard Time"         },
                    { "Asia/Dushanbe",                  "West Asia Standard Time"         },
                    { "Asia/Ashgabat",                  "West Asia Standard Time"         },
                    { "Asia/Samarkand",                 "West Asia Standard Time"         },
                    { "Etc/GMT-5",                      "West Asia Standard Time"         },
                    { "Antarctica/Vostok",              "Central Asia Standard Time"      },
                    { "Asia/Urumqi",                    "Central Asia Standard Time"      },
                    { "Indian/Chagos",                  "Central Asia Standard Time"      },
                    { "Asia/Bishkek",                   "Central Asia Standard Time"      },
                    { "Asia/Qostanay",                  "Central Asia Standard Time"      },
                    { "Etc/GMT-6",                      "Central Asia Standard Time"      },
                    { "Asia/Thimphu",                   "Bangladesh Standard Time"        },
                    { "Indian/Cocos",                   "Myanmar Standard Time"           },
                    { "Antarctica/Davis",               "SE Asia Standard Time"           },
                    { "Indian/Christmas",               "SE Asia Standard Time"           },
                    { "Asia/Jakarta",                   "SE Asia Standard Time"           },
                    { "Asia/Pontianak",                 "SE Asia Standard Time"           },
                    { "Asia/Phnom_Penh",                "SE Asia Standard Time"           },
                    { "Asia/Vientiane",                 "SE Asia Standard Time"           },
                    { "Asia/Saigon",                    "SE Asia Standard Time"           },
                    { "Etc/GMT-7",                      "SE Asia Standard Time"           },
                    { "Asia/Novokuznetsk",              "North Asia Standard Time"        },
                    { "Asia/Hong_Kong",                 "China Standard Time"             },
                    { "Asia/Macau",                     "China Standard Time"             },
                    { "Antarctica/Casey",               "Singapore Standard Time"         },
                    { "Asia/Brunei",                    "Singapore Standard Time"         },
                    { "Asia/Makassar",                  "Singapore Standard Time"         },
                    { "Asia/Kuala_Lumpur",              "Singapore Standard Time"         },
                    { "Asia/Kuching",                   "Singapore Standard Time"         },
                    { "Asia/Manila",                    "Singapore Standard Time"         },
                    { "Etc/GMT-8",                      "Singapore Standard Time"         },
                    { "Asia/Choibalsan",                "Ulaanbaatar Standard Time"       },
                    { "Asia/Jayapura",                  "Tokyo Standard Time"             },
                    { "Pacific/Palau",                  "Tokyo Standard Time"             },
                    { "Asia/Dili",                      "Tokyo Standard Time"             },
                    { "Etc/GMT-9",                      "Tokyo Standard Time"             },
                    { "Asia/Khandyga",                  "Yakutsk Standard Time"           },
                    { "Australia/Broken_Hill",          "Cen. Australia Standard Time"    },
                    { "Australia/Lindeman",             "E. Australia Standard Time"      },
                    { "Australia/Melbourne",            "AUS Eastern Standard Time"       },
                    { "Antarctica/DumontDUrville",      "West Pacific Standard Time"      },
                    { "Pacific/Truk",                   "West Pacific Standard Time"      },
                    { "Pacific/Guam",                   "West Pacific Standard Time"      },
                    { "Pacific/Saipan",                 "West Pacific Standard Time"      },
                    { "Etc/GMT-10",                     "West Pacific Standard Time"      },
                    { "Australia/Currie",               "Tasmania Standard Time"          },
                    { "Asia/Ust-Nera",                  "Vladivostok Standard Time"       },
                    { "Antarctica/Macquarie",           "Central Pacific Standard Time"   },
                    { "Pacific/Ponape",                 "Central Pacific Standard Time"   },
                    { "Pacific/Kosrae",                 "Central Pacific Standard Time"   },
                    { "Pacific/Noumea",                 "Central Pacific Standard Time"   },
                    { "Pacific/Efate",                  "Central Pacific Standard Time"   },
                    { "Etc/GMT-11",                     "Central Pacific Standard Time"   },
                    { "Asia/Anadyr",                    "Russia Time Zone 11"             },
                    { "Antarctica/McMurdo",             "New Zealand Standard Time"       },
                    { "Pacific/Tarawa",                 "UTC+12"                          },
                    { "Pacific/Majuro",                 "UTC+12"                          },
                    { "Pacific/Kwajalein",              "UTC+12"                          },
                    { "Pacific/Nauru",                  "UTC+12"                          },
                    { "Pacific/Funafuti",               "UTC+12"                          },
                    { "Pacific/Wake",                   "UTC+12"                          },
                    { "Pacific/Wallis",                 "UTC+12"                          },
                    { "Pacific/Enderbury",              "UTC+13"                          },
                    { "Pacific/Fakaofo",                "UTC+13"                          },
                    { "Etc/GMT-14",                     "Line Islands Standard Time"      },
                };
#endif

                return new ReadOnlyDictionary<string, string>(idMap);
            }
            catch (Exception)
            {
                return EMPTY_MAP;
            }
        }

        /// <summary>
        /// Loads WindowsId to TzId TimeZone map.
        /// </summary>
        /// <returns></returns>
        private static ReadOnlyDictionary<string, string> loadWindowsIdToTzIdMap2()
        {
            try
            {
                Dictionary<string, string> idMap;

#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)
                idMap = new Dictionary<string, string>(24);

                loadTimeZoneIdMap(idMap, "Thrzn41.Util.Resources.WindowsIdToTzIdTerritoryIndipendent.dat");
#else
                idMap = new Dictionary<string, string>()
                {
                    { "Dateline Standard Time",          "Etc/GMT+12" },
                    { "Hawaiian Standard Time",          "Etc/GMT+10" },
                    { "Pacific Standard Time",           "PST8PDT"    },
                    { "US Mountain Standard Time",       "Etc/GMT+7"  },
                    { "Mountain Standard Time",          "MST7MDT"    },
                    { "Central America Standard Time",   "Etc/GMT+6"  },
                    { "Central Standard Time",           "CST6CDT"    },
                    { "SA Pacific Standard Time",        "Etc/GMT+5"  },
                    { "Eastern Standard Time",           "EST5EDT"    },
                    { "SA Western Standard Time",        "Etc/GMT+4"  },
                    { "SA Eastern Standard Time",        "Etc/GMT+3"  },
                    { "Cape Verde Standard Time",        "Etc/GMT+1"  },
                    { "W. Central Africa Standard Time", "Etc/GMT-1"  },
                    { "South Africa Standard Time",      "Etc/GMT-2"  },
                    { "E. Africa Standard Time",         "Etc/GMT-3"  },
                    { "Arabian Standard Time",           "Etc/GMT-4"  },
                    { "West Asia Standard Time",         "Etc/GMT-5"  },
                    { "Central Asia Standard Time",      "Etc/GMT-6"  },
                    { "SE Asia Standard Time",           "Etc/GMT-7"  },
                    { "Singapore Standard Time",         "Etc/GMT-8"  },
                    { "Tokyo Standard Time",             "Etc/GMT-9"  },
                    { "West Pacific Standard Time",      "Etc/GMT-10" },
                    { "Central Pacific Standard Time",   "Etc/GMT-11" },
                    { "Line Islands Standard Time",      "Etc/GMT-14" },
                };
#endif

                return new ReadOnlyDictionary<string, string>(idMap);
            }
            catch (Exception)
            {
                return EMPTY_MAP;
            }
        }

        static TimeZoneUtils()
        {

#if !(LAZY_LOAD_TIME_ZONE_MAP_DISABLED)

            LAZY_WINDOWS_ID_TO_TZ_ID_MAP = new Lazy<ReadOnlyDictionary<string, string>>(loadWindowsIdToTzIdMap, System.Threading.LazyThreadSafetyMode.ExecutionAndPublication);
            LAZY_TZ_ID_TO_WINDOWS_ID_MAP = new Lazy<ReadOnlyDictionary<string, string>>(loadTzIdToWindowsIdMap, System.Threading.LazyThreadSafetyMode.ExecutionAndPublication);

            LAZY_WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP = new Lazy<ReadOnlyDictionary<string, string>>(loadWindowsIdToTzIdMap2, System.Threading.LazyThreadSafetyMode.ExecutionAndPublication);
#else
            WINDOWS_ID_TO_TZ_ID_MAP = loadWindowsIdToTzIdMap();
            TZ_ID_TO_WINDOWS_ID_MAP = loadTzIdToWindowsIdMap();

            WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP = loadWindowsIdToTzIdMap2();
#endif

            PRESUME_WINDOWS_TIME_ZONE_ENVIRONMENT = ("UTC" == TimeZoneInfo.Utc.Id);
        }


        /// <summary>
        /// Preferred TzId.
        /// </summary>
        public enum PreferredTzId
        {
            /// <summary>
            /// Default.
            /// </summary>
            Default = 0,

            /// <summary>
            /// Territory Indipendent TzId preferred.
            /// </summary>
            TerritoryIndipendent,
        }


        /// <summary>
        /// Gets the tz database id corresponds to a Windows time zone id.
        /// </summary>
        /// <param name="windowsId">Windows time zone id.</param>
        /// <param name="tzId">tz database id corresponds to the Windows time zone id.</param>
        /// <param name="preferredTzId">Preferred TzId type.</param>
        /// <returns>true if the tz database id is found, otherwise false.</returns>
        public static bool TryGetTzIdFromWindowsId(string windowsId, out string tzId, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            // To increase possiblity to clear TIME_ZONE_ID_DATABASE, always try to load lazy map for this small map(TerritoryIndipendetnMap).
            var territoryIndipendentMap = WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP;

            if (territoryIndipendentMap != null && preferredTzId == PreferredTzId.TerritoryIndipendent)
            {
                if (territoryIndipendentMap.TryGetValue(windowsId, out tzId))
                {
                    return true;
                }
            }

            return WINDOWS_ID_TO_TZ_ID_MAP.TryGetValue(windowsId, out tzId);
        }

        /// <summary>
        /// Gets the tz database id corresponds to a Windows time zone id.
        /// </summary>
        /// <param name="windowsId">Windows time zone id.</param>
        /// <param name="preferredTzId">Preferred TzId type.</param>
        /// <returns>tz database id corresponds to the Windows time zone id.</returns>
        /// <exception cref="TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        public static string GetTzIdFromWindowsId(string windowsId, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            string id;

            if (!TryGetTzIdFromWindowsId(windowsId, out id, preferredTzId))
            {
                throw new TimeZoneInfoNotFoundException(String.Format(ResourceMessage.ErrorMessages.TimeZondIdNotFound, windowsId));
            }

            return id;
        }

        /// <summary>
        /// Gets the tz database id list corresponds to a Windows time zone id.
        /// </summary>
        /// <param name="windowsId">Windows time zone id.</param>
        /// <param name="tzIds">tz database id corresponds to the Windows time zone id.</param>
        /// <returns>true if the tz database id is found, otherwise false.</returns>
        public static bool TryGetTzIdsFromWindowsId(string windowsId, out string[] tzIds)
        {
            if (WINDOWS_ID_TO_TZ_ID_MAP.ContainsKey(windowsId))
            {
                var items = new List<string>();

                foreach (var kv in TZ_ID_TO_WINDOWS_ID_MAP)
                {
                    if (kv.Value == windowsId)
                    {
                        items.Add(kv.Key);
                    }
                }

                if (items.Count > 0)
                {
                    tzIds = items.ToArray();
                    return true;
                }
            }

            tzIds = null;
            return false;
        }

        /// <summary>
        /// Gets the tz database id list corresponds to a Windows time zone id.
        /// </summary>
        /// <param name="windowsId">Windows time zone id.</param>
        /// <returns>tz database id corresponds to the Windows time zone id.</returns>
        /// <exception cref="TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        public static string[] GetTzIdsFromWindowsId(string windowsId)
        {
            string[] ids;

            if (!TryGetTzIdsFromWindowsId(windowsId, out ids))
            {
                throw new TimeZoneInfoNotFoundException(String.Format(ResourceMessage.ErrorMessages.TimeZondIdNotFound, windowsId));
            }

            return ids;
        }

        /// <summary>
        /// Gets the Windows time zone id corresponds to a tz database id. 
        /// </summary>
        /// <param name="tzId">tz database id.</param>
        /// <param name="windowsId">Windows time zone id corresponds to the tz database id.</param>
        /// <returns>true if the Windows time zone id is found, otherwise false.</returns>
        public static bool TryGetWindowsIdFromTzId(string tzId, out string windowsId)
        {
            return TZ_ID_TO_WINDOWS_ID_MAP.TryGetValue(tzId, out windowsId);
        }


        /// <summary>
        /// Gets the Windows time zone id corresponds to a tz database id.  
        /// </summary>
        /// <param name="tzId">tz database id.</param>
        /// <returns>Windows time zone id corresponds to the tz database id.</returns>
        /// <exception cref="TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        public static string GetWindowsIdFromTzId(string tzId)
        {
            string id;

            if (!TryGetWindowsIdFromTzId(tzId, out id))
            {
                throw new TimeZoneInfoNotFoundException(String.Format(ResourceMessage.ErrorMessages.TimeZondIdNotFound, tzId));
            }

            return id;
        }

        /// <summary>
        /// Gets the tz database id from <see cref="TimeZoneInfo"/>. 
        /// </summary>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <param name="tzId">tz database id corresponds to the Windows time zone id.</param>
        /// <param name="preferredTzId">Preferred TzId type.</param>
        /// <returns>true if the tz database id is found, otherwise false.</returns>
        public static bool TryGetTzIdFromTimeZoneInfo(TimeZoneInfo timeZoneInfo, out string tzId, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            string id = timeZoneInfo.Id;

            if (TZ_ID_TO_WINDOWS_ID_MAP.ContainsKey(id))
            {
                tzId = id;
                return true;
            }

            return TryGetTzIdFromWindowsId(id, out tzId, preferredTzId);
        }

        /// <summary>
        /// Gets the tz database id from <see cref="TimeZoneInfo"/>. 
        /// </summary>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <param name="preferredTzId">Preferred TzId type.</param>
        /// <returns>tz database id corresponds to the Windows time zone id.</returns>
        public static string GetTzIdFromTimeZoneInfo(TimeZoneInfo timeZoneInfo, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            string id;

            if (!TryGetTzIdFromTimeZoneInfo(timeZoneInfo, out id, preferredTzId))
            {
                throw new TimeZoneInfoNotFoundException(String.Format(ResourceMessage.ErrorMessages.TimeZondIdNotFound, timeZoneInfo.Id));
            }

            return id;
        }

        /// <summary>
        /// Gets the Windows time zone id corresponds to a tz database id. 
        /// </summary>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <param name="windowsId">Windows time zone id corresponds to the tz database id.</param>
        /// <returns>true if the Windows time zone id is found, otherwise false.</returns>
        public static bool TryGetWindowsIdFromTimeZoneInfo(TimeZoneInfo timeZoneInfo, out string windowsId)
        {
            string id = timeZoneInfo.Id;

            if (WINDOWS_ID_TO_TZ_ID_MAP.ContainsKey(id))
            {
                windowsId = id;
                return true;
            }

            return TryGetWindowsIdFromTzId(id, out windowsId);
        }

        /// <summary>
        /// Gets the Windows time zone id corresponds to a tz database id. 
        /// </summary>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <returns>Windows time zone id corresponds to the tz database id.</returns>
        public static string GetWindowsIdFromTimeZoneInfo(TimeZoneInfo timeZoneInfo)
        {
            string id;

            if (!TryGetWindowsIdFromTimeZoneInfo(timeZoneInfo, out id))
            {
                throw new TimeZoneInfoNotFoundException(String.Format(ResourceMessage.ErrorMessages.TimeZondIdNotFound, timeZoneInfo.Id));
            }

            return id;
        }


        /// <summary>
        /// Gets System TimeZoneInfo.
        /// </summary>
        /// <param name="id">The time zone id.</param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <param name="exception"><see cref="Exception"/> which was thrown while finding TimeZone.</param>
        /// <returns>true if the <see cref="TimeZoneInfo"/> is found, otherwise false.</returns>
        private static bool tryGetSystemTimeZoneInfo(string id, out TimeZoneInfo timeZoneInfo, out Exception exception)
        {
            try
            {
                timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(id);
                exception = null;

                return true;
            }
            catch (Exception ex)
            {
                timeZoneInfo = null;
                exception = ex;
            }

            return false;
        }

        /// <summary>
        /// Gets System TimeZoneInfo.
        /// </summary>
        /// <param name="id">The time zone id.</param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <returns>true if the <see cref="TimeZoneInfo"/> is found, otherwise false.</returns>
        private static bool tryGetSystemTimeZoneInfo(string id, out TimeZoneInfo timeZoneInfo)
        {
            Exception exception;

            return tryGetSystemTimeZoneInfo(id, out timeZoneInfo, out exception);
        }

        /// <summary>
        /// Gets System TimeZoneInfo which has Tz database id.
        /// </summary>
        /// <param name="windowsId"></param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <param name="exception"><see cref="Exception"/> which was thrown while finding TimeZone.</param>
        /// <param name="preferredTzId">Preferred TzId type.</param>
        /// <returns>true if the <see cref="TimeZoneInfo"/> is found, otherwise false.</returns>
        private static bool tryGetTzTimeZoneInfoFromWindowsId(string windowsId, out TimeZoneInfo timeZoneInfo, out Exception exception, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            TimeZoneInfo tzi = null;
            Exception ex = null;

            string id;

            if (TryGetTzIdFromWindowsId(windowsId, out id, preferredTzId))
            {
                if (!tryGetSystemTimeZoneInfo(id, out tzi, out ex))
                {
                    string id2;

                    if (preferredTzId != PreferredTzId.Default && TryGetTzIdFromWindowsId(windowsId, out id2, PreferredTzId.Default) && id != id2)
                    {
                        tryGetSystemTimeZoneInfo(id2, out timeZoneInfo);
                    }
                }
            }

            timeZoneInfo = tzi;
            exception = ex;

            if (timeZoneInfo == null)
            {
                return false;
            }

            return true;
        }


        /// <summary>
        /// Gets <see cref="TimeZoneInfo"/> from tz database id.
        /// </summary>
        /// <param name="tzId">tz database id.</param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <returns>true if the <see cref="TimeZoneInfo"/> is found, otherwise false.</returns>
        public static bool TryGetTimeZoneInfoFromTzId(string tzId, out TimeZoneInfo timeZoneInfo)
        {
            try
            {
                timeZoneInfo = GetTimeZoneInfoFromTzId(tzId);

                return true;
            }
            catch (TimeZoneInfoNotFoundException)
            {
                timeZoneInfo = null;
                return false;
            }
        }


        /// <summary>
        /// Gets <see cref="TimeZoneInfo"/> from tz database id.
        /// </summary>
        /// <param name="tzId">tz database id.</param>
        /// <returns><see cref="TimeZoneInfo"/>.</returns>
        /// <exception cref="TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        public static TimeZoneInfo GetTimeZoneInfoFromTzId(string tzId)
        {
            TimeZoneInfo result = null;
            Exception exception = null;

            if (PRESUME_WINDOWS_TIME_ZONE_ENVIRONMENT)
            {
                string id;

                if (TryGetWindowsIdFromTzId(tzId, out id))
                {
                    if (!tryGetSystemTimeZoneInfo(id, out result, out exception))
                    {
                        tryGetSystemTimeZoneInfo(tzId, out result);
                    }
                }
                else
                {
                    tryGetSystemTimeZoneInfo(tzId, out result, out exception);
                }
            }
            else
            {
                if (!tryGetSystemTimeZoneInfo(tzId, out result, out exception))
                {
                    string id;

                    if (TryGetWindowsIdFromTzId(tzId, out id))
                    {
                        tryGetSystemTimeZoneInfo(id, out result);
                    }
                }
            }

            if (result == null)
            {
                string message = String.Format(ResourceMessage.ErrorMessages.TimeZoneInfoNotFoundForId, tzId);

                if (exception != null)
                {
                    throw new TimeZoneInfoNotFoundException(message, exception);
                }
                else
                {
                    throw new TimeZoneInfoNotFoundException(message);
                }
            }

            return result;
        }

        /// <summary>
        /// Gets <see cref="TimeZoneInfo"/> from tz database id.
        /// </summary>
        /// <param name="windowsId">tz database id.</param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/>.</param>
        /// <returns>true if the <see cref="TimeZoneInfo"/> is found, otherwise false.</returns>
        public static bool TryGetTimeZoneInfoFromWindowsId(string windowsId, out TimeZoneInfo timeZoneInfo)
        {
            try
            {
                timeZoneInfo = GetTimeZoneInfoFromWindowsId(windowsId);

                return true;
            }
            catch (TimeZoneInfoNotFoundException)
            {
                timeZoneInfo = null;
                return false;
            }
        }

        /// <summary>
        /// Gets <see cref="TimeZoneInfo"/> from Windows time zone id.
        /// </summary>
        /// <param name="windowsId">tz database id.</param>
        /// <returns><see cref="TimeZoneInfo"/>.</returns>
        /// <exception cref="TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        public static TimeZoneInfo GetTimeZoneInfoFromWindowsId(string windowsId, PreferredTzId preferredTzId = PreferredTzId.Default)
        {
            TimeZoneInfo result;
            Exception exception;

            if (PRESUME_WINDOWS_TIME_ZONE_ENVIRONMENT)
            {
                if (!tryGetSystemTimeZoneInfo(windowsId, out result, out exception))
                {
                    Exception ex;

                    tryGetTzTimeZoneInfoFromWindowsId(windowsId, out result, out ex, preferredTzId);
                }
            }
            else
            {
                if (!tryGetTzTimeZoneInfoFromWindowsId(windowsId, out result, out exception, preferredTzId))
                {
                    if (exception == null)
                    {
                        tryGetSystemTimeZoneInfo(windowsId, out result, out exception);
                    }
                    else
                    {
                        tryGetSystemTimeZoneInfo(windowsId, out result);
                    }
                }
            }

            if (result == null)
            {
                string message = String.Format(ResourceMessage.ErrorMessages.TimeZoneInfoNotFoundForId, windowsId);

                if (exception != null)
                {
                    throw new TimeZoneInfoNotFoundException(message, exception);
                }
                else
                {
                    throw new TimeZoneInfoNotFoundException(message);
                }
            }

            return result;
        }


        /// <summary>
        /// Gets <see cref="DateTimeOffset"/> for specified <see cref="DateTime"/> in the specified <see cref="TimeZoneInfo"/>.
        /// </summary>
        /// <param name="dateTime"><see cref="DateTime"/> to calculate <see cref="DateTimeOffset"/>.
        ///   <see cref="DateTimeKind"/> is important because there are ambiguous datetimes in some timezones(that has daylight saving time).
        ///   Please use UTC based <see cref="DateTime"/> with <see cref="DateTimeKind.Utc"/> if you want to get a certain datetime for these timezones.
        /// </param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/> to calculate <see cref="DateTimeOffset"/>.</param>
        /// <returns><see cref="DateTimeOffset"/>.</returns>
        /// <remarks>
        ///   <see cref="DateTimeKind"/> is important because there are ambiguous datetimes in some timezones(that has daylight saving time).
        ///   Please use UTC based <see cref="DateTime"/> with <see cref="DateTimeKind.Utc"/> if you want to get a certain datetime for these timezones.
        /// </remarks>
        public static DateTimeOffset GetDateTimeOffset(DateTime dateTime, TimeZoneInfo timeZoneInfo)
        {
            if (timeZoneInfo == null)
            {
                throw new ArgumentNullException("timeZoneInfo");
            }

            DateTime dateTimeAdjusted = dateTime;
            TimeSpan timeSpan = TimeSpan.Zero;

            if (dateTime.Kind != DateTimeKind.Unspecified)
            {
                if (dateTime.Kind == DateTimeKind.Utc && !(TimeZoneInfo.Utc.Equals(timeZoneInfo)))
                {
                    dateTimeAdjusted = TimeZoneInfo.ConvertTime(dateTime, TimeZoneInfo.Utc, timeZoneInfo);
                }
                else if (dateTime.Kind == DateTimeKind.Local && !(TimeZoneInfo.Local.Equals(timeZoneInfo)))
                {
                    dateTimeAdjusted = TimeZoneInfo.ConvertTime(dateTime, TimeZoneInfo.Local, timeZoneInfo);
                }
            }

            if (!(TimeZoneInfo.Utc.Equals(timeZoneInfo)))
            {
                if (dateTime.Kind == DateTimeKind.Utc)
                {
                    timeSpan = timeZoneInfo.GetUtcOffset(dateTime);
                }
                else
                {
                    timeSpan = timeZoneInfo.GetUtcOffset(dateTimeAdjusted);
                }
            }


            if (dateTimeAdjusted.Kind != DateTimeKind.Unspecified)
            {
                dateTimeAdjusted = DateTime.SpecifyKind(dateTimeAdjusted, DateTimeKind.Unspecified);
            }
            
            return new DateTimeOffset(dateTimeAdjusted, timeSpan);
        }

        /// <summary>
        /// Gets <see cref="DateTimeOffset"/> for specified <see cref="DateTimeOffset"/> in the specified <see cref="TimeZoneInfo"/>.
        /// </summary>
        /// <param name="dateTime"><see cref="DateTime"/> to calculate <see cref="DateTimeOffset"/>.</param>
        /// <param name="timeZoneInfo"><see cref="TimeZoneInfo"/> to calculate <see cref="DateTimeOffset"/>.</param>
        /// <returns><see cref="DateTimeOffset"/>.</returns>
        public static DateTimeOffset GetDateTimeOffset(DateTimeOffset dateTimeOffset, TimeZoneInfo timeZoneInfo)
        {
            return GetDateTimeOffset(dateTimeOffset.UtcDateTime, timeZoneInfo);
        }


        public static DateTimeOffset[] GetDateTimeOffsets(DateTime dateTime, TimeZoneInfo timeZoneInfo)
        {
            if (timeZoneInfo == null)
            {
                throw new ArgumentNullException("timeZoneInfo");
            }

            if(dateTime.Kind == DateTimeKind.Utc)
            {
                return new DateTimeOffset[] { GetDateTimeOffset(dateTime, timeZoneInfo) };
            }

            DateTime dateTimeAdjusted = dateTime;

            if (dateTime.Kind == DateTimeKind.Local && !(TimeZoneInfo.Local.Equals(timeZoneInfo)))
            {
                    dateTimeAdjusted = TimeZoneInfo.ConvertTime(dateTime, TimeZoneInfo.Local, timeZoneInfo);
            }

            if (dateTimeAdjusted.Kind != DateTimeKind.Unspecified)
            {
                dateTimeAdjusted = DateTime.SpecifyKind(dateTimeAdjusted, DateTimeKind.Unspecified);
            }


            if (TimeZoneInfo.Utc.Equals(timeZoneInfo) || !timeZoneInfo.IsAmbiguousTime(dateTimeAdjusted))
            {
                return new DateTimeOffset[] { new DateTimeOffset(dateTimeAdjusted, TimeSpan.Zero) };
            }
            else
            {
                var timeSpans  = timeZoneInfo.GetAmbiguousTimeOffsets(dateTimeAdjusted);
                var results    = new List<DateTimeOffset>(2);
                var baseOffset = timeZoneInfo.BaseUtcOffset;

                foreach (var item in timeSpans)
                {
                    if(item == baseOffset)
                    {
                        results.Insert(0, new DateTimeOffset(dateTimeAdjusted, item));
                    }
                    else
                    {
                        results.Add(new DateTimeOffset(dateTimeAdjusted, item));
                    }
                }

                return results.ToArray();
            }
        }

    }
}
