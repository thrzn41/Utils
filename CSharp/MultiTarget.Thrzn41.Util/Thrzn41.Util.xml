<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thrzn41.Util</name>
    </assembly>
    <members>
        <member name="T:Thrzn41.Util.CacheEnabledSlimAsyncLock">
            <summary>
            Slim async lock that is allowing multiple tasks for shared resouces.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CacheEnabledSlimAsyncLock.cachedLockedBlockTask">
            <summary>
            Cached task for <see cref="T:Thrzn41.Util.SlimAsyncLock.LockedAsyncBlock"/>.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.CacheEnabledSlimAsyncLock.#ctor">
            <summary>
            Creates cache enabled Slim async lock.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.CacheEnabledSlimAsyncLock.EnterLockedAsyncBlockAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Enter the async locked block.
            <see cref="T:Thrzn41.Util.LockedBlock"/> is used to exit the locked block.
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> to cancel.</param>
            <returns><see cref="T:Thrzn41.Util.LockedBlock"/>  to be used in using statement.</returns>
        </member>
        <member name="T:Thrzn41.Util.CacheEnabledSlimLock">
            <summary>
            Slim lock that is allowing multiple threads for reading or exclusive writing.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CacheEnabledSlimLock.cachedLRB">
            <summary>
            Cached <see cref="T:Thrzn41.Util.SlimLock.LockedReadBlock"/>.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CacheEnabledSlimLock.cachedLWB">
            <summary>
            Cached <see cref="T:Thrzn41.Util.SlimLock.LockedWriteBlock"/>.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CacheEnabledSlimLock.cachedLURB">
            <summary>
            Cached <see cref="T:Thrzn41.Util.SlimLock.LockedUpgradeableReadBlock"/>.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.CacheEnabledSlimLock.#ctor">
            <summary>
            Creates cache enabled Slim lock.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.CacheEnabledSlimLock.#ctor(System.Threading.LockRecursionPolicy)">
            <summary>
            Creates cache enabled Slim lock with policy.
            </summary>
            <param name="policy"><see cref="T:System.Threading.LockRecursionPolicy"/> that specifies whether a lock can be entered multiple times by the same thread.</param>
        </member>
        <member name="M:Thrzn41.Util.CacheEnabledSlimLock.EnterLockedReadBlock">
            <summary>
            Enter the locked block in read mode.
            <see cref="T:Thrzn41.Util.LockedBlock"/> is used to exit the locked block.
            </summary>
            <returns><see cref="T:Thrzn41.Util.SlimLock.LockedReadBlock"/> to be used in using statement.</returns>
        </member>
        <member name="M:Thrzn41.Util.CacheEnabledSlimLock.EnterLockedWriteBlock">
            <summary>
            Enter the locked block in write mode.
            <see cref="T:Thrzn41.Util.LockedBlock"/> is used to exit the locked block.
            </summary>
            <returns><see cref="T:Thrzn41.Util.SlimLock.LockedWriteBlock"/> to be used in using statement.</returns>
        </member>
        <member name="M:Thrzn41.Util.CacheEnabledSlimLock.EnterLockedUpgradeableReadBlock">
            <summary>
            Enter the locked block in read mode.
            <see cref="T:Thrzn41.Util.LockedBlock"/> is used to exit the locked block.
            </summary>
            <returns><see cref="T:Thrzn41.Util.SlimLock.LockedUpgradeableReadBlock"/> to be used in using statement.</returns>
        </member>
        <member name="T:Thrzn41.Util.CryptoRandom">
            <summary>
            Provides features for generating cryptographic ramdom number.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.CryptoRandom.ASCIICategory">
            <summary>
            ASCII category to be used <see cref="M:Thrzn41.Util.CryptoRandom.GetASCIIChars(System.Int32,Thrzn41.Util.CryptoRandom.ASCIICategory)"/>.
            For now, symbols are not supported.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CryptoRandom.ASCIICategory.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CryptoRandom.ASCIICategory.UpperAlphabet">
            <summary>
            Upper ASCII Alphabet.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CryptoRandom.ASCIICategory.LowerAlphabet">
            <summary>
            Lower ASCII Alphabet.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CryptoRandom.ASCIICategory.Number">
            <summary>
            ASCII Numbers.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CryptoRandom.RNGCSP">
            <summary>
            Cryptographic random number generator.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CryptoRandom.ASCII_UPPERS">
            <summary>
            ASCII upper chars.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CryptoRandom.ASCII_LOWERS">
            <summary>
            ASCII lower chars.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.CryptoRandom.ASCII_NUMBERS">
            <summary>
            ASCII number chars.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.CryptoRandom.NextBytes(System.Int32)">
            <summary>
            Returns random byte array.
            </summary>
            <param name="byteLength">Length of byte array to be returned. byteLenght must be greater than 0 or equals to 0.</param>
            <returns>Random byte array.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">byteLenght is less than 0.</exception>
        </member>
        <member name="M:Thrzn41.Util.CryptoRandom.FillBytes(System.Byte[])">
            <summary>
            Fills byte array with random byte.
            </summary>
            <param name="bytes">Byte array to be filled.</param>
        </member>
        <member name="M:Thrzn41.Util.CryptoRandom.NextInt(System.Int32)">
            <summary>
            Returns a non-negative int that is less than maxValue. 
            </summary>
            <param name="maxValue">MaxValue to be returned.</param>
            <returns>Non-negative int that is less than maxValue.</returns>
        </member>
        <member name="M:Thrzn41.Util.CryptoRandom.GetASCIIChars(System.Int32,Thrzn41.Util.CryptoRandom.ASCIICategory)">
            <summary>
            Returns random ASCII char array.
            </summary>
            <param name="charLength">Length of byte array to be returned. byteLenght must be greater than 0 or equals to 0.</param>
            <param name="category"><see cref="T:Thrzn41.Util.CryptoRandom.ASCIICategory"/> that is returned in char array.</param>
            <returns>Random ASCII char array.</returns>
        </member>
        <member name="M:Thrzn41.Util.CryptoRandom.isFairInt(System.Int32,System.Int32)">
            <summary>
            Checks if the value is fair or not.
            </summary>
            <param name="value">Value to be checked.</param>
            <param name="maxValue">MaxValue to be checked.</param>
            <returns>true if fair, false if not fair.</returns>
        </member>
        <member name="T:Thrzn41.Util.DataProtect">
            <summary>
            Provides features for encrypting data.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.DataProtect.Encrypt(System.Byte[])">
            <summary>
            Encrypts the supplied data.
            </summary>
            <param name="data">The data to encrypt.</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="M:Thrzn41.Util.DataProtect.Decrypt(System.Byte[])">
            <summary>
            Decrypts the supplied data.
            </summary>
            <param name="encryptedData">The encrypted data to decrypt.</param>
            <returns>The decrypted data.</returns>
        </member>
        <member name="M:Thrzn41.Util.DataProtect.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.DateTimeUtils">
            <summary>
            Utils for TimeZone.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.DateTimeUtils.NormalizeOption">
            <summary>
            Normalize option.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.DateTimeUtils.NormalizeOption.Future">
            <summary>
            Normalize datetime to a future date.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.DateTimeUtils.NormalizeOption.Past">
            <summary>
            Normalize datetime to a future date.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.DateTimeUtils.Normalize(System.DateTime,System.TimeSpan,System.TimeSpan,Thrzn41.Util.DateTimeUtils.NormalizeOption)">
            <summary>
            Normalizes datetime.
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/>.</param>
            <param name="baseSpan"><see cref="T:System.TimeSpan"/> for normalization base.It will be better to use multiples or divisors of 60 secs, 60 mins.</param>
            <param name="minDiff">The minimal difference between source datetime and normalized datetime.</param>
            <param name="option"><see cref="F:Thrzn41.Util.DateTimeUtils.NormalizeOption.Future"/> for nomalized future date.<see cref="F:Thrzn41.Util.DateTimeUtils.NormalizeOption.Past"/> for normalized past date.</param>
            <returns>Normalized <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Thrzn41.Util.DateTimeUtils.Normalize(System.DateTime,System.TimeSpan,Thrzn41.Util.DateTimeUtils.NormalizeOption)">
            <summary>
            Normalizes datetime.
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/>.</param>
            <param name="baseSpan"><see cref="T:System.TimeSpan"/> for normalization base.It will be better to use multiples or divisors of 60 secs, 60 mins.</param>
            <param name="option"><see cref="F:Thrzn41.Util.DateTimeUtils.NormalizeOption.Future"/> for nomalized future date.<see cref="F:Thrzn41.Util.DateTimeUtils.NormalizeOption.Past"/> for normalized past date.</param>
            <returns>Normalized <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="T:Thrzn41.Util.HashString">
            <summary>
            Provides feature for Hash string.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.HashString.ENCODING">
            <summary>
            Internal encoding.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.HashString.hashAlgorithm">
            <summary>
            Hash algorithm to be used.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.HashString.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Constuctor of <see cref="T:Thrzn41.Util.HashString"/>.
            </summary>
            <param name="hashAlgorithm"><see cref="T:System.Security.Cryptography.HashAlgorithm"/> of <see cref="T:Thrzn41.Util.HashString"/></param>
        </member>
        <member name="M:Thrzn41.Util.HashString.convertToString(System.Byte[])">
            <summary>
            Converts hash bytes to string.
            </summary>
            <param name="hash">Hash bytes.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.ComputeString(System.Byte[])">
            <summary>
            Computes hash string.
            </summary>
            <param name="data">Data to be computed.</param>
            <returns>Computed hash string.</returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.ComputeString(System.IO.Stream)">
            <summary>
            Computes hash string.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> to be computed.</param>
            <returns>Computed hash string.</returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.CreateHMACSHA512(System.Byte[])">
            <summary>
            Create <see cref="T:System.Security.Cryptography.HMACSHA512"/> based <see cref="T:Thrzn41.Util.HashString"/>.
            </summary>
            <param name="secret">Secret bytes.</param>
            <returns><see cref="T:System.Security.Cryptography.HMACSHA512"/> based <see cref="T:Thrzn41.Util.HashString"/></returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.CreateHMACSHA512(System.String)">
            <summary>
            Create <see cref="T:System.Security.Cryptography.HMACSHA512"/> based <see cref="T:Thrzn41.Util.HashString"/>.
            </summary>
            <param name="secret">Secret string.</param>
            <returns><see cref="T:System.Security.Cryptography.HMACSHA512"/> based <see cref="T:Thrzn41.Util.HashString"/></returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.CreateHMACSHA256(System.Byte[])">
            <summary>
            Create <see cref="T:System.Security.Cryptography.HMACSHA256"/> based <see cref="T:Thrzn41.Util.HashString"/>.
            </summary>
            <param name="secret">Secret bytes.</param>
            <returns><see cref="T:System.Security.Cryptography.HMACSHA256"/> based <see cref="T:Thrzn41.Util.HashString"/></returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.CreateHMACSHA256(System.String)">
            <summary>
            Create <see cref="T:System.Security.Cryptography.HMACSHA256"/> based <see cref="T:Thrzn41.Util.HashString"/>.
            </summary>
            <param name="secret">Secret string.</param>
            <returns><see cref="T:System.Security.Cryptography.HMACSHA256"/> based <see cref="T:Thrzn41.Util.HashString"/></returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.CreateHMACSHA1(System.Byte[])">
            <summary>
            Create <see cref="T:System.Security.Cryptography.HMACSHA1"/> based <see cref="T:Thrzn41.Util.HashString"/>.
            </summary>
            <param name="secret">Secret bytes.</param>
            <returns><see cref="T:System.Security.Cryptography.HMACSHA1"/> based <see cref="T:Thrzn41.Util.HashString"/></returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.CreateHMACSHA1(System.String)">
            <summary>
            Create <see cref="T:System.Security.Cryptography.HMACSHA1"/> based <see cref="T:Thrzn41.Util.HashString"/>.
            </summary>
            <param name="secret">Secret string.</param>
            <returns><see cref="T:System.Security.Cryptography.HMACSHA1"/> based <see cref="T:Thrzn41.Util.HashString"/></returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.CreateSHA512">
            <summary>
            Create <see cref="T:System.Security.Cryptography.SHA512"/> based <see cref="T:Thrzn41.Util.HashString"/>.
            </summary>
            <returns><see cref="T:System.Security.Cryptography.SHA512"/> based <see cref="T:Thrzn41.Util.HashString"/></returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.CreateSHA256">
            <summary>
            Create <see cref="T:System.Security.Cryptography.SHA256"/> based <see cref="T:Thrzn41.Util.HashString"/>.
            </summary>
            <returns><see cref="T:System.Security.Cryptography.SHA256"/> based <see cref="T:Thrzn41.Util.HashString"/></returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.CreateSHA1">
            <summary>
            Create <see cref="T:System.Security.Cryptography.SHA1"/> based <see cref="T:Thrzn41.Util.HashString"/>.
            </summary>
            <returns><see cref="T:System.Security.Cryptography.SHA1"/> based <see cref="T:Thrzn41.Util.HashString"/></returns>
        </member>
        <member name="M:Thrzn41.Util.HashString.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">disposing.</param>
        </member>
        <member name="M:Thrzn41.Util.HashString.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.HttpUtils">
            <summary>
            Utils for Web.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.HttpUtils.BuildQueryParameters(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Builds Query paramerters from <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="queryParameters"><see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains key/value pair of query parameters.</param>
            <returns>string of query parameters.</returns>
        </member>
        <member name="M:Thrzn41.Util.HttpUtils.BuildUri(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Builds https or http uri from <see cref="T:System.Uri"/> and <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            This method does not care of fragment part of uri.
            </summary>
            <param name="baseUri">Base <see cref="T:System.Uri"/> of https or http.</param>
            <param name="queryParameters"><see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains key/value pair of query parameters.</param>
            <returns>Uri with query parameters.</returns>
            <exception cref="T:System.ArgumentException">Uri scheme is not https or http.</exception>
        </member>
        <member name="T:Thrzn41.Util.LocalDataProtect">
            <summary>
            Provides features for encrypting and decrypting data in local environment.
            This class can be used to save/load encrypted string to/from config file or database, etc.
            An encrypted string by this class does not have portability and can be decrypted by local user or local machine based on <see cref="T:System.Security.Cryptography.DataProtectionScope"/>.
            Please note that this class does not provide in-memory protection.
            </summary>
            <remarks>
            This class does not provide in-memory protection and can be used to save/load encrypted string to/from config file or database, etc.
            </remarks>
        </member>
        <member name="P:Thrzn41.Util.LocalDataProtect.ProtectionScope">
            <summary>
            <see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.LocalDataProtect.Entropy">
            <summary>
            Gets entropy to encrypt or decrypt data.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.LocalDataProtect.EntropyBase64">
            <summary>
            Gets entropy in base64 format.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.LocalDataProtect.disposedValue">
            <summary>
            Indicates disposed or not.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.#ctor(System.Security.Cryptography.DataProtectionScope)">
            <summary>
            pvivate Constuctor.
            </summary>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encryption and decryption.</param>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.Create(System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.LocalDataProtect"/>.
            </summary>
            <param name="entropy">Entropy to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns><see cref="T:Thrzn41.Util.LocalDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.Create(System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.LocalDataProtect"/>.
            </summary>
            <param name="entropyBase64">Base64 Entropy to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns><see cref="T:Thrzn41.Util.LocalDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.Create(System.Int32,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.LocalDataProtect"/>.
            </summary>
            <param name="entropyLength">Entropy length to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns><see cref="T:Thrzn41.Util.LocalDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.checkDisposed">
            <summary>
            Checks if disposed.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.Encrypt(System.Byte[])">
            <summary>
            Encrypts the supplied data.
            </summary>
            <param name="data">The data to encrypt.</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.Decrypt(System.Byte[])">
            <summary>
            Decrypts the supplied data.
            </summary>
            <param name="encryptedData">The encrypted data to decrypt.</param>
            <returns>The decrypted data.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.CreateProtectedByteArrayFromData(System.Byte[])">
            <summary>
            Creates <see cref="T:Thrzn41.Util.ProtectedByteArray"/> from data.
            </summary>
            <param name="data">Data to be encrypted.</param>
            <returns><see cref="T:Thrzn41.Util.ProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.CreateProtectedByteArrayFromEncryptedData(System.Byte[])">
            <summary>
            Creates <see cref="T:Thrzn41.Util.ProtectedByteArray"/> from encrypted data.
            </summary>
            <param name="encryptedData">Encrypted data to be decrypted.</param>
            <returns><see cref="T:Thrzn41.Util.ProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.CreateProtectedByteArrayFromEncryptedDataBase64(System.String)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.ProtectedByteArray"/> from base64 encrypted data.
            </summary>
            <param name="encryptedDataBase64">Base64 encrypted data to be decrypted.</param>
            <returns><see cref="T:Thrzn41.Util.ProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.CreateProtectedStringFromChars(System.Char[])">
            <summary>
            Creates <see cref="T:Thrzn41.Util.ProtectedString"/> from data.
            </summary>
            <param name="chars">Char array to be encrypted.</param>
            <returns><see cref="T:Thrzn41.Util.ProtectedString"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.CreateProtectedStringFromString(System.String)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.ProtectedString"/> from data.
            </summary>
            <param name="str">Char array to be encrypted.</param>
            <returns><see cref="T:Thrzn41.Util.ProtectedString"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.CreateProtectedStringFromEncryptedData(System.Byte[])">
            <summary>
            Creates <see cref="T:Thrzn41.Util.ProtectedString"/> from encrypted data.
            </summary>
            <param name="encryptedData">Encrypted data to be decrypted.</param>
            <returns><see cref="T:Thrzn41.Util.ProtectedString"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.CreateProtectedStringFromEncryptedDataBase64(System.String)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.ProtectedString"/> from base64 encrypted data.
            </summary>
            <param name="encryptedDataBase64">Base64 encrypted data to be decrypted.</param>
            <returns><see cref="T:Thrzn41.Util.ProtectedString"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.ConvertToProtectedByteArray(Thrzn41.Util.ProtectedByteArray)">
            <summary>
            Converts to <see cref="T:Thrzn41.Util.ProtectedByteArray"/> from source ProtectedByteArray.
            </summary>
            <param name="source">Source ProtectedByteArray.</param>
            <returns>Converted <see cref="T:Thrzn41.Util.ProtectedByteArray"/>.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.ConvertToProtectedString(Thrzn41.Util.ProtectedString)">
            <summary>
            Converts to <see cref="T:Thrzn41.Util.ProtectedString"/> from source ProtectedByteArray.
            </summary>
            <param name="source">Source ProtectedByteArray.</param>
            <returns>Converted <see cref="T:Thrzn41.Util.ProtectedString"/>.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">disposing.</param>
        </member>
        <member name="M:Thrzn41.Util.LocalDataProtect.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.LocalProtectedByteArray">
            <summary>
            Provides features for encrypting and decrypting data in local environment.
            This class can be used to save/load encrypted string to/from config file or database, etc.
            An encrypted string by this class does not have portability and can be decrypted by local user or local machine based on <see cref="T:System.Security.Cryptography.DataProtectionScope"/>.
            Please note that this class does not provide in-memory protection.
            </summary>
            <remarks>
            This class does not provide in-memory protection and can be used to save/load encrypted string to/from config file or database, etc.
            </remarks>
        </member>
        <member name="P:Thrzn41.Util.LocalProtectedByteArray.ProtectionScope">
            <summary>
            <see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.LocalProtectedByteArray.Entropy">
            <summary>
            Gets entropy to encrypt or decrypt data.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.LocalProtectedByteArray.EntropyBase64">
            <summary>
            Gets entropy in base64 format.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedByteArray.#ctor(Thrzn41.Util.LocalDataProtect,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.LocalProtectedByteArray"/>.
            </summary>
            <param name="dataProtect"><see cref="T:Thrzn41.Util.DataProtect"/> to encrypt or decrypt data.</param>
            <param name="data">The source data.</param>
            <param name="isDataEncrypted">Indicates the source data is encrypted or not.</param>
            <param name="isDataProtectOwner">Indicates this instance has <see cref="T:Thrzn41.Util.DataProtect"/> onwership or not.</param>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedByteArray.FromData(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> from data.
            </summary>
            <param name="data">Data to be encrypted.</param>
            <param name="entropy">Entropy to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns><see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedByteArray.FromData(System.Byte[],System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> from data.
            </summary>
            <param name="data">Data to be encrypted.</param>
            <param name="entropyBase64">Base64 Entropy to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns><see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedByteArray.FromData(System.Byte[],System.Int32,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> from data.
            </summary>
            <param name="data">Char array to be encrypted.</param>
            <param name="entropyLength">Entropy length to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns><see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedByteArray.FromEncryptedData(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> from encrypted data.
            </summary>
            <param name="encryptedData">Encrypted data to be decrypted.</param>
            <param name="entropy">Entropy to be used on decryption.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns><see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedByteArray.FromEncryptedDataBase64(System.String,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> from base64 encrypted data.
            </summary>
            <param name="encryptedDataBase64">Base64 encrypted data to be decrypted.</param>
            <param name="entropyBase64">Base64 entropy to be used on decryption.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns><see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> instance.</returns>
        </member>
        <member name="T:Thrzn41.Util.LocalProtectedString">
            <summary>
            Provides features for encrypting and decrypting String in local environment.
            This class can be used to save/load encrypted string to/from config file or database, etc.
            An encrypted string by this class does not have portability and can be decrypted by local user or local machine based on <see cref="T:System.Security.Cryptography.DataProtectionScope"/>.
            Please note that this class does not provide in-memory protection.
            </summary>
            <remarks>
            This class does not provide in-memory protection and can be used to save/load encrypted string to/from config file or database, etc.
            </remarks>
        </member>
        <member name="F:Thrzn41.Util.LocalProtectedString.ENCODING">
            <summary>
            Internal encoding of this class.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.LocalProtectedString.localProtectedByteArray">
            <summary>
            <see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> to encrypt or decrypt.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.LocalProtectedString.disposedValue">
            <summary>
            Indicates disposed.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.LocalProtectedString.ProtectionScope">
            <summary>
            <see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.LocalProtectedString.Entropy">
            <summary>
            Gets entropy to encrypt or decrypt data.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.LocalProtectedString.EntropyBase64">
            <summary>
            Gets entropy in base64 format.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.#ctor(Thrzn41.Util.LocalProtectedByteArray)">
            <summary>
            pvivate Constuctor.
            </summary>
            <param name="localProtectedByteArray"><see cref="T:Thrzn41.Util.LocalProtectedByteArray"/> for encryption and decryption.</param>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.FromChars(System.Char[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates instance from char array.
            </summary>
            <param name="chars">Char array to be encrypted.</param>
            <param name="entropy">Entropy to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns>ProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.FromChars(System.Char[],System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates instance from char array.
            </summary>
            <param name="chars">Char array to be encrypted.</param>
            <param name="entropyBase64">Base64 Entropy to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns>ProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.FromChars(System.Char[],System.Int32,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates instance from char array.
            </summary>
            <param name="chars">Char array to be encrypted.</param>
            <param name="entropyLength">Entropy length to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns>ProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.FromString(System.String,System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates instance from string.
            </summary>
            <param name="str">string to be encrypted.</param>
            <param name="entropy">Entropy to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns>ProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.FromString(System.String,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates instance from string.
            </summary>
            <param name="str">string to be encrypted.</param>
            <param name="entropyBase64">Base64 Entropy to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns>ProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.FromString(System.String,System.Int32,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates instance from string.
            </summary>
            <param name="str">string to be encrypted.</param>
            <param name="entropyLength">Entropy length to be used on encrypting.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns>ProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.FromEncryptedData(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates instance from encrypted data.
            </summary>
            <param name="encryptedData">Encrypted data to be decrypted.</param>
            <param name="entropy">Entropy to be used on decryption.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns>ProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.FromEncryptedDataBase64(System.String,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates instance from base64 encrypted data.
            </summary>
            <param name="encryptedDataBase64">Base64 encrypted data to be decrypted.</param>
            <param name="entropyBase64">Base64 entropy to be used on decryption.</param>
            <param name="scope"><see cref="T:System.Security.Cryptography.DataProtectionScope"/> for encrypted data.</param>
            <returns>ProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.DecryptToChars">
            <summary>
            Decrypts to char array.
            </summary>
            <returns>Decrypted char array.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.Decrypt">
            <summary>
            Decrypts the data.
            </summary>
            <returns>The decrypted data.</returns>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">disposing.</param>
        </member>
        <member name="M:Thrzn41.Util.LocalProtectedString.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.LockedBlock">
            <summary>
            Locked code block.
            The main purpose of the class is to use in using statement.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.LockedBlock.Exit">
            <summary>
            Exits from the locked block.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.LockedBlock.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.PBEDataProtect">
            <summary>
            Provides features for encrypting and decrypting data by password based encryption.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEDataProtect.BLOCK_SIZE">
            <summary>
            Block size.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEDataProtect.ENCODING">
            <summary>
            Internal encoding of this class.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.PBEDataProtect.Salt">
            <summary>
            Gets the salt to encrypt or decrypt data.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.PBEDataProtect.SaltBase64">
            <summary>
            Gets salt in base64 format.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEDataProtect.key">
            <summary>
            Key for encryption and decryption.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEDataProtect.iv">
            <summary>
            Initialization vector for encryption and decryption.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEDataProtect.keySize">
            <summary>
            Key size.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEDataProtect.cipherMode">
            <summary>
            <see cref="T:System.Security.Cryptography.CipherMode"/> for encryption and decryption.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEDataProtect.paddingMode">
            <summary>
            <see cref="T:System.Security.Cryptography.PaddingMode"/> for encryption and decryption.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEDataProtect.disposedValue">
            <summary>
            Indicates disposed.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.#ctor(System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            private constructor.
            </summary>
            <param name="keySize">Key size.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/> for encryption and decryption.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/> for encryption and decryption.</param>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.generateKey(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generates key and iv.
            </summary>
            <param name="password">Password to generate key and iv.</param>
            <param name="iterationCount">Iteration count to generate.</param>
            <param name="blockSize">Block size.</param>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Create(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEDataProtect"/>.
            </summary>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Create(System.Char[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEDataProtect"/>.
            </summary>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Create(System.String,System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEDataProtect"/>.
            </summary>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Create(System.Byte[],System.String,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEDataProtect"/>.
            </summary>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltBase64">Base64 encoded Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Create(System.Char[],System.String,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEDataProtect"/>.
            </summary>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltBase64">Base64 encoded Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Create(System.String,System.String,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEDataProtect"/>.
            </summary>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltBase64">Base64 encoded Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Create(System.Byte[],System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEDataProtect"/>.
            </summary>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLength">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Create(System.Char[],System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEDataProtect"/>.
            </summary>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLength">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Create(System.String,System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEDataProtect"/>.
            </summary>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLength">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEDataProtect"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.createAes">
            <summary>
            Creates <see cref="T:System.Security.Cryptography.Aes"/>.
            </summary>
            <returns><see cref="T:System.Security.Cryptography.Aes"/>.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.checkDisposed">
            <summary>
            Checks if disposed.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Encrypt(System.Byte[])">
            <summary>
            Encrypts the supplied data.
            </summary>
            <param name="data">The data to encrypt.</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Decrypt(System.Byte[])">
            <summary>
            Decrypts the supplied data.
            </summary>
            <param name="encryptedData">The encrypted data to decrypt.</param>
            <returns>The decrypted data.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">disposing.</param>
        </member>
        <member name="M:Thrzn41.Util.PBEDataProtect.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.PBEProtectedByteArray">
            <summary>
            Provides features for encrypting and decrypting data by password based encryption.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.PBEProtectedByteArray.Salt">
            <summary>
            Gets the salt to encrypt or decrypt data.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.PBEProtectedByteArray.SaltBase64">
            <summary>
            Gets salt in base64 format.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.#ctor(Thrzn41.Util.PBEDataProtect,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/>.
            </summary>
            <param name="dataProtect"><see cref="T:Thrzn41.Util.DataProtect"/> to encrypt or decrypt data.</param>
            <param name="data">The source data.</param>
            <param name="isDataEncrypted">Indicates the source data is encrypted or not.</param>
            <param name="isDataProtectOwner">Indicates this instance has <see cref="T:Thrzn41.Util.DataProtect"/> onwership or not.</param>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromData(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from char array.
            </summary>
            <param name="data">Char array to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromData(System.Byte[],System.Char[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from char array.
            </summary>
            <param name="data">Char array to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromData(System.Byte[],System.String,System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from char array.
            </summary>
            <param name="data">Char array to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromData(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from char array.
            </summary>
            <param name="data">Char array to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLenght">Salt lenght to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromData(System.Byte[],System.Char[],System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from char array.
            </summary>
            <param name="data">Char array to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLenght">Salt lenght to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromData(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from char array.
            </summary>
            <param name="data">Char array to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLenght">Salt lenght to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromEncryptedData(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from encrypted data.
            </summary>
            <param name="encryptedData">Encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromEncryptedData(System.Byte[],System.Char[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from encrypted data.
            </summary>
            <param name="encryptedData">Encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromEncryptedData(System.Byte[],System.String,System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from encrypted data.
            </summary>
            <param name="encryptedData">Encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromEncryptedDataBase64(System.String,System.Byte[],System.String,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from base64 encrypted data.
            </summary>
            <param name="encryptedDataBase64">Base64 encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltBase64">Base64 Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromEncryptedDataBase64(System.String,System.Char[],System.String,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from base64 encrypted data.
            </summary>
            <param name="encryptedDataBase64">Base64 encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltBase64">Base64 Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedByteArray.FromEncryptedDataBase64(System.String,System.String,System.String,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> from base64 encrypted data.
            </summary>
            <param name="encryptedDataBase64">Base64 encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltBase64">Base64 Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> instance.</returns>
        </member>
        <member name="T:Thrzn41.Util.PBEProtectedString">
            <summary>
            Provides features for encrypting and decrypting String by password based encryption.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEProtectedString.BLOCK_SIZE">
            <summary>
            Block size.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEProtectedString.ENCODING">
            <summary>
            Internal encoding of this class.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEProtectedString.pbeProtectedByteArray">
            <summary>
            <see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> to encrypt or decrypt.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.PBEProtectedString.disposedValue">
            <summary>
            Indicate disposed.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.PBEProtectedString.Salt">
            <summary>
            Gets the salt to encrypt or decrypt data.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.PBEProtectedString.SaltBase64">
            <summary>
            Gets salt in base64 format.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.#ctor(Thrzn41.Util.PBEProtectedByteArray)">
            <summary>
            pvivate Constuctor.
            </summary>
            <param name="pbeProtectedByteArray"><see cref="T:Thrzn41.Util.PBEProtectedByteArray"/> for encryption and decryption.</param>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromChars(System.Char[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from char array.
            </summary>
            <param name="chars">Char array to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLenght">Salt length to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromChars(System.Char[],System.Char[],System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from char array.
            </summary>
            <param name="chars">Char array to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLenght">Salt length to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromChars(System.Char[],System.String,System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from char array.
            </summary>
            <param name="chars">Char array to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLenght">Salt length to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromString(System.String,System.Byte[],System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from string.
            </summary>
            <param name="str">string to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLenght">Salt length to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromString(System.String,System.Char[],System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from string.
            </summary>
            <param name="str">string to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLenght">Salt length to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromString(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from string.
            </summary>
            <param name="str">string to be encrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltLenght">Salt length to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromEncryptedData(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from encrypted data.
            </summary>
            <param name="encryptedData">Encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromEncryptedData(System.Byte[],System.Char[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from encrypted data.
            </summary>
            <param name="encryptedData">Encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromEncryptedData(System.Byte[],System.String,System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from encrypted data.
            </summary>
            <param name="encryptedData">Encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="salt">Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromEncryptedDataBase64(System.String,System.Byte[],System.String,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from base64 encrypted data.
            </summary>
            <param name="encryptedDataBase64">Base64 encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltBase64">Base64 Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromEncryptedDataBase64(System.String,System.Char[],System.String,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from base64 encrypted data.
            </summary>
            <param name="encryptedDataBase64">Base64 encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltBase64">Base64 Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.FromEncryptedDataBase64(System.String,System.String,System.String,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates instance from base64 encrypted data.
            </summary>
            <param name="encryptedDataBase64">Base64 encrypted data to be decrypted.</param>
            <param name="password">Password to generate key to encrypt and decrypt.</param>
            <param name="saltBase64">Base64 Salt to generate key.</param>
            <param name="iterationCount">Iteration count to generate key.</param>
            <param name="keySize">Key size in bit.</param>
            <param name="cipherMode"><see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingMode"><see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>PBEProtectedString instance.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.DecryptToChars">
            <summary>
            Decrypts to char array.
            </summary>
            <returns>Decrypted char array.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.Decrypt">
            <summary>
            Decrypts the data.
            </summary>
            <returns>The decrypted data.</returns>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">disposing.</param>
        </member>
        <member name="M:Thrzn41.Util.PBEProtectedString.Dispose">
            <summary>
            dispose.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.ProtectedByteArray">
            <summary>
            Provides features for encrypting and decrypting byte array.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.ProtectedByteArray.disposedValue">
            <summary>
            Indicates disposed.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ProtectedByteArray.EncryptedData">
            <summary>
            Gets encrypted data.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ProtectedByteArray.EncryptedDataBase64">
            <summary>
            Gets encrypted data in base64 format.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.ProtectedByteArray.Decrypt">
            <summary>
            Decrypts the data.
            </summary>
            <returns>The decrypted data.</returns>
        </member>
        <member name="M:Thrzn41.Util.ProtectedByteArray.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">Disposing.</param>
        </member>
        <member name="M:Thrzn41.Util.ProtectedByteArray.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.ProtectedByteArrayWithDataProtect`1">
            <summary>
            Provides features for encrypting and decrypting byte array.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.ProtectedByteArrayWithDataProtect`1.dataProtect">
            <summary>
            <see cref="T:Thrzn41.Util.DataProtect"/> for encryption and decryption.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.ProtectedByteArrayWithDataProtect`1.isDataProtectOwner">
            <summary>
            Indicates this instance has <see cref="F:Thrzn41.Util.ProtectedByteArrayWithDataProtect`1.dataProtect"/> ownership.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.ProtectedByteArrayWithDataProtect`1.disposedValue">
            <summary>
            Indicates the object disposed.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.ProtectedByteArrayWithDataProtect`1.#ctor(`0,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Creates <see cref="T:Thrzn41.Util.ProtectedByteArrayWithDataProtect`1"/>.
            </summary>
            <param name="dataProtect"><see cref="T:Thrzn41.Util.DataProtect"/> to encrypt or decrypt data.</param>
            <param name="data">The source data.</param>
            <param name="isDataEncrypted">Indicates the source data is encrypted or not.</param>
            <param name="isDataProtectOwner">Indicates this instance has <see cref="T:Thrzn41.Util.DataProtect"/> onwership or not.</param>
        </member>
        <member name="M:Thrzn41.Util.ProtectedByteArrayWithDataProtect`1.Decrypt">
            <summary>
            Decrypts the data.
            </summary>
            <returns>The decrypted data.</returns>
        </member>
        <member name="M:Thrzn41.Util.ProtectedByteArrayWithDataProtect`1.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">disposing.</param>
        </member>
        <member name="M:Thrzn41.Util.ProtectedByteArrayWithDataProtect`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.ProtectedDataUtils.RAND">
            <summary>
            Crypto random generator.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.ProtectedDataUtils.ClearArray``1(``0[])">
            <summary>
            Clears array.
            </summary>
            <typeparam name="T">Type in array to be cleared.</typeparam>
            <param name="data">Data to be cleared.</param>
            <returns>Value that is set in cleared array.</returns>
        </member>
        <member name="M:Thrzn41.Util.ProtectedDataUtils.ClearBytes(System.Byte[])">
            <summary>
            Clears byte array.
            Clearing byte array which contains sensitive data in memory is better for security.
            However, for long-lifetime byte array may be copied by managed memory manager.
            </summary>
            <param name="bytes">Byte array to be cleared.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:Thrzn41.Util.ProtectedString">
            <summary>
            Provides features for encrypting and decrypting String.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.ProtectedString.DecryptToChars">
            <summary>
            Decrypts to char array.
            </summary>
            <returns>Decrypted char array.</returns>
        </member>
        <member name="M:Thrzn41.Util.ProtectedString.DecryptToSecureString">
            <summary>
            Decrypts to <see cref="T:System.Security.SecureString"/>.
            </summary>
            <returns>Decrypted <see cref="T:System.Security.SecureString"/>.</returns>
        </member>
        <member name="M:Thrzn41.Util.ProtectedString.DecryptToString">
            <summary>
            Decrypts to string.
            </summary>
            <returns>Decrypted string.</returns>
        </member>
        <member name="M:Thrzn41.Util.ProtectedString.ClearArray``1(``0[])">
            <summary>
            Clears array.
            </summary>
            <typeparam name="T">Type in array to be cleared.</typeparam>
            <param name="data">Data to be cleared.</param>
            <returns>Value that is set in cleared array.</returns>
        </member>
        <member name="M:Thrzn41.Util.ProtectedString.ClearChars(System.Char[])">
            <summary>
            Clears char array.
            Clearing char array which contains sensitive data in memory is better for security.
            However, for long-lifetime char array may be copied by managed memory manager.
            </summary>
            <param name="chars">Char array to be cleared.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:Thrzn41.Util.ProtectedString.ClearBytes(System.Byte[])">
            <summary>
            Clears byte array.
            Clearing byte array which contains sensitive data in memory is better for security.
            However, for long-lifetime byte array may be copied by managed memory manager.
            </summary>
            <param name="bytes">Byte array to be cleared.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:Thrzn41.Util.ResourceMessage.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.BaseSpanLessThanOrEqualsZero">
            <summary>
              Looks up a localized string similar to baseSpan is less than or equals 0..
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.ByteLengthLessThanZero">
            <summary>
              Looks up a localized string similar to byteLength is less than 0..
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.CharLengthLessThanZero">
            <summary>
              Looks up a localized string similar to charLength is less than 0..
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.InvalidDateTime">
            <summary>
              Looks up a localized string similar to The supplied DateTime represents an invalid time..
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.MaxValueLessThanZero">
            <summary>
              Looks up a localized string similar to maxValue is less than 0..
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.MinDiffLessThanZero">
            <summary>
              Looks up a localized string similar to minDiff is less than 0..
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.MinDiffTooLarge">
            <summary>
              Looks up a localized string similar to minDiff is too large..
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.TimeZondIdNotFound">
            <summary>
              Looks up a localized string similar to TimeZone id &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.TimeZoneInfoNotFoundForId">
            <summary>
              Looks up a localized string similar to TimeZoneInfo for id &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Thrzn41.Util.ResourceMessage.ErrorMessages.UriSchemeIsNotHttpsOrHttp">
            <summary>
              Looks up a localized string similar to Uri scheme is not https or http..
            </summary>
        </member>
        <member name="T:Thrzn41.Util.SlimAsyncLock">
            <summary>
            Slim async lock that is allowing multiple tasks for shared resouces.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.SlimAsyncLock.LockedAsyncBlock">
            <summary>
            Locked code block.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.SlimAsyncLock.LockedAsyncBlock.semaphore">
            <summary>
            Semaphore to lock a task.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.SlimAsyncLock.LockedAsyncBlock.#ctor(System.Threading.SemaphoreSlim)">
            <summary>
            Constructor.
            </summary>
            <param name="semaphore"><see cref="T:System.Threading.SemaphoreSlim"/> to lock.</param>
        </member>
        <member name="M:Thrzn41.Util.SlimAsyncLock.LockedAsyncBlock.Exit">
            <summary>
            Exits from the locked block.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.SlimAsyncLock.semaphore">
            <summary>
            Semaphore to lock a task.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.SlimAsyncLock.#ctor">
            <summary>
            Creates Slim async lock.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.SlimAsyncLock.EnterLockedAsyncBlockAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Enter the async locked block.
            <see cref="T:Thrzn41.Util.LockedBlock"/> is used to exit the locked block.
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> to cancel.</param>
            <returns><see cref="T:Thrzn41.Util.LockedBlock"/>  to be used in using statement.</returns>
        </member>
        <member name="M:Thrzn41.Util.SlimAsyncLock.ExecuteInLockAsync(System.Func{System.Threading.Tasks.Task},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes in lock.
            </summary>
            <param name="func">This function is executed in reader lock.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> to cancel.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> of the async operation.</returns>
        </member>
        <member name="M:Thrzn41.Util.SlimAsyncLock.ExecuteInLockAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes in lock.
            </summary>
            <typeparam name="TResult">Type of result.</typeparam>
            <param name="func">Function that returns value.This function is executed in reader lock.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> to cancel.</param>
            <returns><see cref="T:System.Threading.Tasks.Task`1"/> of the async operation.</returns>
        </member>
        <member name="M:Thrzn41.Util.SlimAsyncLock.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">disposing.</param>
        </member>
        <member name="M:Thrzn41.Util.SlimAsyncLock.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.SlimLock">
            <summary>
            Slim lock that is allowing multiple threads for reading or exclusive writing.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.SlimLock.LockedReadBlock">
            <summary>
            Locked code block in read mode.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.SlimLock.LockedReadBlock.rwLock">
            <summary>
            ReaderWriter lock.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.LockedReadBlock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Constructor.
            </summary>
            <param name="rwLock"><see cref="T:System.Threading.ReaderWriterLockSlim"/> to be used to exit the lock.</param>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.LockedReadBlock.Exit">
            <summary>
            Exits from the locked block.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.SlimLock.LockedWriteBlock">
            <summary>
            Locked code block in write mode.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.SlimLock.LockedWriteBlock.rwLock">
            <summary>
            ReaderWriter lock.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.LockedWriteBlock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Constructor.
            </summary>
            <param name="rwLock"><see cref="T:System.Threading.ReaderWriterLockSlim"/> to be used to exit the lock.</param>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.LockedWriteBlock.Exit">
            <summary>
            Exits from the locked block.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.SlimLock.LockedUpgradeableReadBlock">
            <summary>
            Locked code block in upgradeable read mode.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.SlimLock.LockedUpgradeableReadBlock.rwLock">
            <summary>
            ReaderWriter lock.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.LockedUpgradeableReadBlock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Constructor.
            </summary>
            <param name="rwLock"><see cref="T:System.Threading.ReaderWriterLockSlim"/> to be used to exit the lock.</param>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.LockedUpgradeableReadBlock.Exit">
            <summary>
            Exits from the locked block.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.LockedUpgradeableReadBlock.UpgradeToLockedWriteBlock">
            <summary>
            Upgrades the lock block to write mode.
            <see cref="T:Thrzn41.Util.LockedBlock"/> is used to exit the locked block.
            </summary>
            <returns><see cref="T:Thrzn41.Util.SlimLock.LockedWriteBlock"/> to be used in using statement.</returns>
        </member>
        <member name="F:Thrzn41.Util.SlimLock.rwLock">
            <summary>
            ReaderWriter lock.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.#ctor">
            <summary>
            Creates Slim lock.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.#ctor(System.Threading.LockRecursionPolicy)">
            <summary>
            Creates Slim lock with policy.
            </summary>
            <param name="policy"><see cref="T:System.Threading.LockRecursionPolicy"/> that specifies whether a lock can be entered multiple times by the same thread.</param>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.EnterLockedReadBlock">
            <summary>
            Enter the locked block in read mode.
            <see cref="T:Thrzn41.Util.LockedBlock"/> is used to exit the locked block.
            </summary>
            <returns><see cref="T:Thrzn41.Util.SlimLock.LockedReadBlock"/> to be used in using statement.</returns>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.EnterLockedWriteBlock">
            <summary>
            Enter the locked block in write mode.
            <see cref="T:Thrzn41.Util.LockedBlock"/> is used to exit the locked block.
            </summary>
            <returns><see cref="T:Thrzn41.Util.SlimLock.LockedWriteBlock"/> to be used in using statement.</returns>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.EnterLockedUpgradeableReadBlock">
            <summary>
            Enter the locked block in read mode.
            <see cref="T:Thrzn41.Util.LockedBlock"/> is used to exit the locked block.
            </summary>
            <returns><see cref="T:Thrzn41.Util.SlimLock.LockedUpgradeableReadBlock"/> to be used in using statement.</returns>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.ExecuteInReaderLock``1(System.Func{``0})">
            <summary>
            Executes in reader lock.
            </summary>
            <typeparam name="TResult">Type of result.</typeparam>
            <param name="func">Function that returns value.This function is executed in reader lock.</param>
            <returns>Result value of the func function parameter.</returns>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.ExecuteInWriterLock``1(System.Func{``0})">
            <summary>
            Executes in reader lock.
            </summary>
            <typeparam name="TResult">Type of result.</typeparam>
            <param name="func">Function that returns value.This function is executed in reader lock.</param>
            <returns>Result value of the func function parameter.</returns>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.ExecuteInReaderLock(System.Action)">
            <summary>
            Executes in reader lock.
            </summary>
            <param name="func">This function is executed in reader lock.</param>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.ExecuteInWriterLock(System.Action)">
            <summary>
            Executes in reader lock.
            </summary>
            <param name="func">This function is executed in reader lock.</param>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">disposing.</param>
        </member>
        <member name="M:Thrzn41.Util.SlimLock.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Thrzn41.Util.TimeZoneInfoNotFoundException">
            <summary>
            The exception that is thrown when a time zone id cannot be found.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneInfoNotFoundException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">message.</param>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneInfoNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Thrzn41.Util.TimeZoneUtils">
            <summary>
            Utils for TimeZone.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.WINDOWS_ID_VERSION_TAG">
            <summary>
            Windows Id Version Tag.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.TZ_ID_VERSION_TAG">
            <summary>
            TzId Version Tag.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.EMPTY_MAP">
            <summary>
            Empty map.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.TimeZoneUtils.WindowsIdVersionTag">
            <summary>
            Windows Id Version Tag.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.TimeZoneUtils.TzIdVersionTag">
            <summary>
            TzId Version Tag.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.LAZY_WINDOWS_ID_TO_TZ_ID_MAP">
            <summary>
            WindowsId to TzId map(Lazy Load).
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.LAZY_TZ_ID_TO_WINDOWS_ID_MAP">
            <summary>
            TzId to WindowsId map(Lazy Load).
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.LAZY_WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP">
            <summary>
            WindowsId to TzId map(Lazy Load).
            </summary>
        </member>
        <member name="P:Thrzn41.Util.TimeZoneUtils.WINDOWS_ID_TO_TZ_ID_MAP">
            <summary>
            WindowsId to TzId map.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.TimeZoneUtils.TZ_ID_TO_WINDOWS_ID_MAP">
            <summary>
            TzId to WindowsId map.
            </summary>
        </member>
        <member name="P:Thrzn41.Util.TimeZoneUtils.WINDOWS_ID_TO_TZ_ID_TERRITORY_INDIPENDENT_MAP">
            <summary>
            WindowsId to TzId map.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.PRESUME_WINDOWS_TIME_ZONE_ENVIRONMENT">
            <summary>
            Presume this environmet has windows time zone.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.LOCK">
            <summary>
            Slim Lock.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.INIT_COUNT">
            <summary>
            Init counter.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.TIME_ZONE_ID_DATABASE">
            <summary>
            TimeZone id database to reduce reference count.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.TryAddToDictionary(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Try add to TimeZone Id map.
            </summary>
            <param name="dictionary">Target map.</param>
            <param name="key">The key.</param>
            <param name="value">The value for the key.</param>
            <returns>true if the key, value paire added to the map.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.loadTimeZoneIdMap(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Load TimeZone Id map from resource.
            </summary>
            <param name="timeZoneIdMap">TimeZone id map to be loaded.</param>
            <param name="resourceName">Source resource of the map.</param>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.loadWindowsIdToTzIdMap">
            <summary>
            Loads WindowsId to TzId TimeZone map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.loadTzIdToWindowsIdMap">
            <summary>
            Loads TzId to WindowsId TimeZone map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.loadWindowsIdToTzIdTerritoryIndipendentMap">
            <summary>
            Loads WindowsId to TzId TimeZone map.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Thrzn41.Util.TimeZoneUtils.PreferredTzId">
            <summary>
            Preferred TzId.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.PreferredTzId.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.TimeZoneUtils.PreferredTzId.TerritoryIndipendent">
            <summary>
            Territory Indipendent TzId preferred.
            </summary>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.TryGetTzIdFromWindowsId(System.String,System.String@,Thrzn41.Util.TimeZoneUtils.PreferredTzId)">
            <summary>
            Gets the tz database id corresponds to a Windows time zone id.
            </summary>
            <param name="windowsId">Windows time zone id.</param>
            <param name="tzId">tz database id corresponds to the Windows time zone id.</param>
            <param name="preferredTzId">Preferred TzId type.</param>
            <returns>true if the tz database id is found, otherwise false.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.GetTzIdFromWindowsId(System.String,Thrzn41.Util.TimeZoneUtils.PreferredTzId)">
            <summary>
            Gets the tz database id corresponds to a Windows time zone id.
            </summary>
            <param name="windowsId">Windows time zone id.</param>
            <param name="preferredTzId">Preferred TzId type.</param>
            <returns>tz database id corresponds to the Windows time zone id.</returns>
            <exception cref="T:Thrzn41.Util.TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.TryGetTzIdsFromWindowsId(System.String,System.String[]@)">
            <summary>
            Gets the tz database id list corresponds to a Windows time zone id.
            </summary>
            <param name="windowsId">Windows time zone id.</param>
            <param name="tzIds">tz database id corresponds to the Windows time zone id.</param>
            <returns>true if the tz database id is found, otherwise false.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.GetTzIdsFromWindowsId(System.String)">
            <summary>
            Gets the tz database id list corresponds to a Windows time zone id.
            </summary>
            <param name="windowsId">Windows time zone id.</param>
            <returns>tz database id corresponds to the Windows time zone id.</returns>
            <exception cref="T:Thrzn41.Util.TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.TryGetWindowsIdFromTzId(System.String,System.String@)">
            <summary>
            Gets the Windows time zone id corresponds to a tz database id. 
            </summary>
            <param name="tzId">tz database id.</param>
            <param name="windowsId">Windows time zone id corresponds to the tz database id.</param>
            <returns>true if the Windows time zone id is found, otherwise false.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.GetWindowsIdFromTzId(System.String)">
            <summary>
            Gets the Windows time zone id corresponds to a tz database id.  
            </summary>
            <param name="tzId">tz database id.</param>
            <returns>Windows time zone id corresponds to the tz database id.</returns>
            <exception cref="T:Thrzn41.Util.TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.TryGetTzIdFromTimeZoneInfo(System.TimeZoneInfo,System.String@,Thrzn41.Util.TimeZoneUtils.PreferredTzId)">
            <summary>
            Gets the tz database id from <see cref="T:System.TimeZoneInfo"/>. 
            </summary>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/>.</param>
            <param name="tzId">tz database id corresponds to the Windows time zone id.</param>
            <param name="preferredTzId">Preferred TzId type.</param>
            <returns>true if the tz database id is found, otherwise false.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.GetTzIdFromTimeZoneInfo(System.TimeZoneInfo,Thrzn41.Util.TimeZoneUtils.PreferredTzId)">
            <summary>
            Gets the tz database id from <see cref="T:System.TimeZoneInfo"/>. 
            </summary>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/>.</param>
            <param name="preferredTzId">Preferred TzId type.</param>
            <returns>tz database id corresponds to the Windows time zone id.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.TryGetWindowsIdFromTimeZoneInfo(System.TimeZoneInfo,System.String@)">
            <summary>
            Gets the Windows time zone id corresponds to a tz database id. 
            </summary>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/>.</param>
            <param name="windowsId">Windows time zone id corresponds to the tz database id.</param>
            <returns>true if the Windows time zone id is found, otherwise false.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.GetWindowsIdFromTimeZoneInfo(System.TimeZoneInfo)">
            <summary>
            Gets the Windows time zone id corresponds to a tz database id. 
            </summary>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/>.</param>
            <returns>Windows time zone id corresponds to the tz database id.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.tryGetSystemTimeZoneInfo(System.String,System.TimeZoneInfo@,System.Exception@)">
            <summary>
            Gets System TimeZoneInfo.
            </summary>
            <param name="id">The time zone id.</param>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/>.</param>
            <param name="exception"><see cref="T:System.Exception"/> which was thrown while finding TimeZone.</param>
            <returns>true if the <see cref="T:System.TimeZoneInfo"/> is found, otherwise false.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.tryGetSystemTimeZoneInfo(System.String,System.TimeZoneInfo@)">
            <summary>
            Gets System TimeZoneInfo.
            </summary>
            <param name="id">The time zone id.</param>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/>.</param>
            <returns>true if the <see cref="T:System.TimeZoneInfo"/> is found, otherwise false.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.tryGetTzTimeZoneInfoFromWindowsId(System.String,System.TimeZoneInfo@,System.Exception@,Thrzn41.Util.TimeZoneUtils.PreferredTzId)">
            <summary>
            Gets System TimeZoneInfo which has Tz database id.
            </summary>
            <param name="windowsId"></param>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/>.</param>
            <param name="exception"><see cref="T:System.Exception"/> which was thrown while finding TimeZone.</param>
            <param name="preferredTzId">Preferred TzId type.</param>
            <returns>true if the <see cref="T:System.TimeZoneInfo"/> is found, otherwise false.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.TryGetTimeZoneInfoFromTzId(System.String,System.TimeZoneInfo@)">
            <summary>
            Gets <see cref="T:System.TimeZoneInfo"/> from tz database id.
            </summary>
            <param name="tzId">tz database id.</param>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/>.</param>
            <returns>true if the <see cref="T:System.TimeZoneInfo"/> is found, otherwise false.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.GetTimeZoneInfoFromTzId(System.String)">
            <summary>
            Gets <see cref="T:System.TimeZoneInfo"/> from tz database id.
            </summary>
            <param name="tzId">tz database id.</param>
            <returns><see cref="T:System.TimeZoneInfo"/>.</returns>
            <exception cref="T:Thrzn41.Util.TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.TryGetTimeZoneInfoFromWindowsId(System.String,System.TimeZoneInfo@)">
            <summary>
            Gets <see cref="T:System.TimeZoneInfo"/> from tz database id.
            </summary>
            <param name="windowsId">tz database id.</param>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/>.</param>
            <returns>true if the <see cref="T:System.TimeZoneInfo"/> is found, otherwise false.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.GetTimeZoneInfoFromWindowsId(System.String,Thrzn41.Util.TimeZoneUtils.PreferredTzId)">
            <summary>
            Gets <see cref="T:System.TimeZoneInfo"/> from Windows time zone id.
            </summary>
            <param name="windowsId">tz database id.</param>
            <param name="preferredTzId">Preferred TzId type.</param>
            <returns><see cref="T:System.TimeZoneInfo"/>.</returns>
            <exception cref="T:Thrzn41.Util.TimeZoneInfoNotFoundException">Thrown if the time zone id is not found.</exception>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.GetDateTimeOffset(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Gets <see cref="T:System.DateTimeOffset"/> for specified <see cref="T:System.DateTime"/> in the specified <see cref="T:System.TimeZoneInfo"/>.
            </summary>
            <param name="dateTime">
              <para><see cref="T:System.DateTime"/> to calculate <see cref="T:System.DateTimeOffset"/>.</para>
              <para><see cref="T:System.DateTimeKind"/> is important because there are ambiguous datetimes in some timezones(that has daylight saving time).</para>
              <para>Please use UTC based <see cref="T:System.DateTime"/> with <see cref="F:System.DateTimeKind.Utc"/> if you want to get a certain datetime for these timezones.</para>
            </param>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/> to calculate <see cref="T:System.DateTimeOffset"/>.</param>
            <returns><see cref="T:System.DateTimeOffset"/>.</returns>
            <remarks>
              <para><see cref="T:System.DateTimeKind"/> is important because there are ambiguous datetimes in some timezones(that has daylight saving time).</para>
              <para>Please use UTC based <see cref="T:System.DateTime"/> with <see cref="F:System.DateTimeKind.Utc"/> if you want to get a certain datetime for these timezones.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">The dateTime parameter represents an invalid time.</exception>
            <exception cref="T:System.ArgumentNullException">The timeZoneInfo parameter is null.</exception>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.GetDateTimeOffset(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
            Gets <see cref="T:System.DateTimeOffset"/> for specified <see cref="T:System.DateTimeOffset"/> in the specified <see cref="T:System.TimeZoneInfo"/>.
            </summary>
            <param name="dateTimeOffset"><see cref="T:System.DateTime"/> to calculate <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/> to calculate <see cref="T:System.DateTimeOffset"/>.</param>
            <returns><see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Thrzn41.Util.TimeZoneUtils.GetDateTimeOffsets(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Gets <see cref="T:System.DateTimeOffset"/> list for specified <see cref="T:System.DateTimeOffset"/> in the specified <see cref="T:System.TimeZoneInfo"/>.
            If the result contains two DateTimeOffsets, the index-0 contains standard time.
            </summary>
            <param name="dateTime">
              <para><see cref="T:System.DateTime"/> to calculate <see cref="T:System.DateTimeOffset"/>.</para>
              <para><see cref="T:System.DateTimeKind"/> is important because there are ambiguous datetimes in some timezones(that has daylight saving time).</para>
              <para>For <see cref="F:System.DateTimeKind.Utc"/>, only one <see cref="T:System.DateTimeOffset"/> is in the returned list.</para>
              <para>For <see cref="F:System.DateTimeKind.Unspecified"/> or <see cref="F:System.DateTimeKind.Local"/>, there is a case that two <see cref="T:System.DateTimeOffset"/> items are returned when the datetime is ambiguous.</para>
              <para>For <see cref="F:System.DateTimeKind.Local"/>, there are more complicated situations that local time zone also have ambiguous datetimes.</para>
            </param>
            <param name="timeZoneInfo"><see cref="T:System.TimeZoneInfo"/> to calculate <see cref="T:System.DateTimeOffset"/>.</param>
            <returns><see cref="T:System.DateTimeOffset"/> list.</returns>
            <remarks>
              <para><see cref="T:System.DateTimeKind"/> is important because there are ambiguous datetimes in some timezones(that has daylight saving time).</para>
              <para>For <see cref="F:System.DateTimeKind.Utc"/>, only one <see cref="T:System.DateTimeOffset"/> is in the returned list.</para>
              <para>For <see cref="F:System.DateTimeKind.Unspecified"/> or <see cref="F:System.DateTimeKind.Local"/>, there is a case that two <see cref="T:System.DateTimeOffset"/> items are returned when the datetime is ambiguous.</para>
              <para>For <see cref="F:System.DateTimeKind.Local"/>, there are more complicated situations that local time zone also have ambiguous datetimes.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">The dateTime parameter represents an invalid time.</exception>
            <exception cref="T:System.ArgumentNullException">The timeZoneInfo parameter is null.</exception>
        </member>
        <member name="T:Thrzn41.Util.UTF8Utils">
            <summary>
            Utils for UTF-8 Encoding.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.UTF8Utils.UTF8_WITH_BOM">
            <summary>
            Represents UTF-8 Encoding with Byte order mark.
            </summary>
        </member>
        <member name="F:Thrzn41.Util.UTF8Utils.UTF8_WITHOUT_BOM">
            <summary>
            Represents UTF-8 Encoding without Byte order mark.
            </summary>
        </member>
    </members>
</doc>
